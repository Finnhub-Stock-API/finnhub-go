/*
Finnhub API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finnhub

import (
	"encoding/json"
)

// AIChatResponse struct for AIChatResponse
type AIChatResponse struct {
	// Chat ID.
	ChatId *string `json:"chatId,omitempty"`
	// Response text.
	Content *string `json:"content,omitempty"`
	// Query summary
	QuerySummary *string `json:"querySummary,omitempty"`
	// Related queries.
	RelatedQueries *[]map[string]interface{} `json:"relatedQueries,omitempty"`
	// List of tickers mentioned.
	Tickers *[]map[string]interface{} `json:"tickers,omitempty"`
	// Sources.
	Sources *[]map[string]interface{} `json:"sources,omitempty"`
	// Widgets.
	Widgets *[]map[string]interface{} `json:"widgets,omitempty"`
}

// NewAIChatResponse instantiates a new AIChatResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAIChatResponse() *AIChatResponse {
	this := AIChatResponse{}
	return &this
}

// NewAIChatResponseWithDefaults instantiates a new AIChatResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAIChatResponseWithDefaults() *AIChatResponse {
	this := AIChatResponse{}
	return &this
}

// GetChatId returns the ChatId field value if set, zero value otherwise.
func (o *AIChatResponse) GetChatId() string {
	if o == nil || o.ChatId == nil {
		var ret string
		return ret
	}
	return *o.ChatId
}

// GetChatIdOk returns a tuple with the ChatId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AIChatResponse) GetChatIdOk() (*string, bool) {
	if o == nil || o.ChatId == nil {
		return nil, false
	}
	return o.ChatId, true
}

// HasChatId returns a boolean if a field has been set.
func (o *AIChatResponse) HasChatId() bool {
	if o != nil && o.ChatId != nil {
		return true
	}

	return false
}

// SetChatId gets a reference to the given string and assigns it to the ChatId field.
func (o *AIChatResponse) SetChatId(v string) {
	o.ChatId = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *AIChatResponse) GetContent() string {
	if o == nil || o.Content == nil {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AIChatResponse) GetContentOk() (*string, bool) {
	if o == nil || o.Content == nil {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *AIChatResponse) HasContent() bool {
	if o != nil && o.Content != nil {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *AIChatResponse) SetContent(v string) {
	o.Content = &v
}

// GetQuerySummary returns the QuerySummary field value if set, zero value otherwise.
func (o *AIChatResponse) GetQuerySummary() string {
	if o == nil || o.QuerySummary == nil {
		var ret string
		return ret
	}
	return *o.QuerySummary
}

// GetQuerySummaryOk returns a tuple with the QuerySummary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AIChatResponse) GetQuerySummaryOk() (*string, bool) {
	if o == nil || o.QuerySummary == nil {
		return nil, false
	}
	return o.QuerySummary, true
}

// HasQuerySummary returns a boolean if a field has been set.
func (o *AIChatResponse) HasQuerySummary() bool {
	if o != nil && o.QuerySummary != nil {
		return true
	}

	return false
}

// SetQuerySummary gets a reference to the given string and assigns it to the QuerySummary field.
func (o *AIChatResponse) SetQuerySummary(v string) {
	o.QuerySummary = &v
}

// GetRelatedQueries returns the RelatedQueries field value if set, zero value otherwise.
func (o *AIChatResponse) GetRelatedQueries() []map[string]interface{} {
	if o == nil || o.RelatedQueries == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.RelatedQueries
}

// GetRelatedQueriesOk returns a tuple with the RelatedQueries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AIChatResponse) GetRelatedQueriesOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.RelatedQueries == nil {
		return nil, false
	}
	return o.RelatedQueries, true
}

// HasRelatedQueries returns a boolean if a field has been set.
func (o *AIChatResponse) HasRelatedQueries() bool {
	if o != nil && o.RelatedQueries != nil {
		return true
	}

	return false
}

// SetRelatedQueries gets a reference to the given []map[string]interface{} and assigns it to the RelatedQueries field.
func (o *AIChatResponse) SetRelatedQueries(v []map[string]interface{}) {
	o.RelatedQueries = &v
}

// GetTickers returns the Tickers field value if set, zero value otherwise.
func (o *AIChatResponse) GetTickers() []map[string]interface{} {
	if o == nil || o.Tickers == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Tickers
}

// GetTickersOk returns a tuple with the Tickers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AIChatResponse) GetTickersOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Tickers == nil {
		return nil, false
	}
	return o.Tickers, true
}

// HasTickers returns a boolean if a field has been set.
func (o *AIChatResponse) HasTickers() bool {
	if o != nil && o.Tickers != nil {
		return true
	}

	return false
}

// SetTickers gets a reference to the given []map[string]interface{} and assigns it to the Tickers field.
func (o *AIChatResponse) SetTickers(v []map[string]interface{}) {
	o.Tickers = &v
}

// GetSources returns the Sources field value if set, zero value otherwise.
func (o *AIChatResponse) GetSources() []map[string]interface{} {
	if o == nil || o.Sources == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Sources
}

// GetSourcesOk returns a tuple with the Sources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AIChatResponse) GetSourcesOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Sources == nil {
		return nil, false
	}
	return o.Sources, true
}

// HasSources returns a boolean if a field has been set.
func (o *AIChatResponse) HasSources() bool {
	if o != nil && o.Sources != nil {
		return true
	}

	return false
}

// SetSources gets a reference to the given []map[string]interface{} and assigns it to the Sources field.
func (o *AIChatResponse) SetSources(v []map[string]interface{}) {
	o.Sources = &v
}

// GetWidgets returns the Widgets field value if set, zero value otherwise.
func (o *AIChatResponse) GetWidgets() []map[string]interface{} {
	if o == nil || o.Widgets == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Widgets
}

// GetWidgetsOk returns a tuple with the Widgets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AIChatResponse) GetWidgetsOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Widgets == nil {
		return nil, false
	}
	return o.Widgets, true
}

// HasWidgets returns a boolean if a field has been set.
func (o *AIChatResponse) HasWidgets() bool {
	if o != nil && o.Widgets != nil {
		return true
	}

	return false
}

// SetWidgets gets a reference to the given []map[string]interface{} and assigns it to the Widgets field.
func (o *AIChatResponse) SetWidgets(v []map[string]interface{}) {
	o.Widgets = &v
}

func (o AIChatResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ChatId != nil {
		toSerialize["chatId"] = o.ChatId
	}
	if o.Content != nil {
		toSerialize["content"] = o.Content
	}
	if o.QuerySummary != nil {
		toSerialize["querySummary"] = o.QuerySummary
	}
	if o.RelatedQueries != nil {
		toSerialize["relatedQueries"] = o.RelatedQueries
	}
	if o.Tickers != nil {
		toSerialize["tickers"] = o.Tickers
	}
	if o.Sources != nil {
		toSerialize["sources"] = o.Sources
	}
	if o.Widgets != nil {
		toSerialize["widgets"] = o.Widgets
	}
	return json.Marshal(toSerialize)
}

type NullableAIChatResponse struct {
	value *AIChatResponse
	isSet bool
}

func (v NullableAIChatResponse) Get() *AIChatResponse {
	return v.value
}

func (v *NullableAIChatResponse) Set(val *AIChatResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAIChatResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAIChatResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAIChatResponse(val *AIChatResponse) *NullableAIChatResponse {
	return &NullableAIChatResponse{value: val, isSet: true}
}

func (v NullableAIChatResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAIChatResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


