/*
Finnhub API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finnhub

import (
	"encoding/json"
)

// FilingSentiment struct for FilingSentiment
type FilingSentiment struct {
	// % of negative words in the filing.
	Negative *float32 `json:"negative,omitempty"`
	// % of positive words in the filing.
	Positive *float32 `json:"positive,omitempty"`
	// % of polarity words in the filing.
	Polarity *float32 `json:"polarity,omitempty"`
	// % of litigious words in the filing.
	Litigious *float32 `json:"litigious,omitempty"`
	// % of uncertainty words in the filing.
	Uncertainty *float32 `json:"uncertainty,omitempty"`
	// % of constraining words in the filing.
	Constraining *float32 `json:"constraining,omitempty"`
	// % of modal-weak words in the filing.
	ModalWeak *float32 `json:"modal-weak,omitempty"`
	// % of modal-strong words in the filing.
	ModalStrong *float32 `json:"modal-strong,omitempty"`
	// % of modal-moderate words in the filing.
	ModalModerate *float32 `json:"modal-moderate,omitempty"`
}

// NewFilingSentiment instantiates a new FilingSentiment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilingSentiment() *FilingSentiment {
	this := FilingSentiment{}
	return &this
}

// NewFilingSentimentWithDefaults instantiates a new FilingSentiment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilingSentimentWithDefaults() *FilingSentiment {
	this := FilingSentiment{}
	return &this
}

// GetNegative returns the Negative field value if set, zero value otherwise.
func (o *FilingSentiment) GetNegative() float32 {
	if o == nil || o.Negative == nil {
		var ret float32
		return ret
	}
	return *o.Negative
}

// GetNegativeOk returns a tuple with the Negative field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilingSentiment) GetNegativeOk() (*float32, bool) {
	if o == nil || o.Negative == nil {
		return nil, false
	}
	return o.Negative, true
}

// HasNegative returns a boolean if a field has been set.
func (o *FilingSentiment) HasNegative() bool {
	if o != nil && o.Negative != nil {
		return true
	}

	return false
}

// SetNegative gets a reference to the given float32 and assigns it to the Negative field.
func (o *FilingSentiment) SetNegative(v float32) {
	o.Negative = &v
}

// GetPositive returns the Positive field value if set, zero value otherwise.
func (o *FilingSentiment) GetPositive() float32 {
	if o == nil || o.Positive == nil {
		var ret float32
		return ret
	}
	return *o.Positive
}

// GetPositiveOk returns a tuple with the Positive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilingSentiment) GetPositiveOk() (*float32, bool) {
	if o == nil || o.Positive == nil {
		return nil, false
	}
	return o.Positive, true
}

// HasPositive returns a boolean if a field has been set.
func (o *FilingSentiment) HasPositive() bool {
	if o != nil && o.Positive != nil {
		return true
	}

	return false
}

// SetPositive gets a reference to the given float32 and assigns it to the Positive field.
func (o *FilingSentiment) SetPositive(v float32) {
	o.Positive = &v
}

// GetPolarity returns the Polarity field value if set, zero value otherwise.
func (o *FilingSentiment) GetPolarity() float32 {
	if o == nil || o.Polarity == nil {
		var ret float32
		return ret
	}
	return *o.Polarity
}

// GetPolarityOk returns a tuple with the Polarity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilingSentiment) GetPolarityOk() (*float32, bool) {
	if o == nil || o.Polarity == nil {
		return nil, false
	}
	return o.Polarity, true
}

// HasPolarity returns a boolean if a field has been set.
func (o *FilingSentiment) HasPolarity() bool {
	if o != nil && o.Polarity != nil {
		return true
	}

	return false
}

// SetPolarity gets a reference to the given float32 and assigns it to the Polarity field.
func (o *FilingSentiment) SetPolarity(v float32) {
	o.Polarity = &v
}

// GetLitigious returns the Litigious field value if set, zero value otherwise.
func (o *FilingSentiment) GetLitigious() float32 {
	if o == nil || o.Litigious == nil {
		var ret float32
		return ret
	}
	return *o.Litigious
}

// GetLitigiousOk returns a tuple with the Litigious field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilingSentiment) GetLitigiousOk() (*float32, bool) {
	if o == nil || o.Litigious == nil {
		return nil, false
	}
	return o.Litigious, true
}

// HasLitigious returns a boolean if a field has been set.
func (o *FilingSentiment) HasLitigious() bool {
	if o != nil && o.Litigious != nil {
		return true
	}

	return false
}

// SetLitigious gets a reference to the given float32 and assigns it to the Litigious field.
func (o *FilingSentiment) SetLitigious(v float32) {
	o.Litigious = &v
}

// GetUncertainty returns the Uncertainty field value if set, zero value otherwise.
func (o *FilingSentiment) GetUncertainty() float32 {
	if o == nil || o.Uncertainty == nil {
		var ret float32
		return ret
	}
	return *o.Uncertainty
}

// GetUncertaintyOk returns a tuple with the Uncertainty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilingSentiment) GetUncertaintyOk() (*float32, bool) {
	if o == nil || o.Uncertainty == nil {
		return nil, false
	}
	return o.Uncertainty, true
}

// HasUncertainty returns a boolean if a field has been set.
func (o *FilingSentiment) HasUncertainty() bool {
	if o != nil && o.Uncertainty != nil {
		return true
	}

	return false
}

// SetUncertainty gets a reference to the given float32 and assigns it to the Uncertainty field.
func (o *FilingSentiment) SetUncertainty(v float32) {
	o.Uncertainty = &v
}

// GetConstraining returns the Constraining field value if set, zero value otherwise.
func (o *FilingSentiment) GetConstraining() float32 {
	if o == nil || o.Constraining == nil {
		var ret float32
		return ret
	}
	return *o.Constraining
}

// GetConstrainingOk returns a tuple with the Constraining field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilingSentiment) GetConstrainingOk() (*float32, bool) {
	if o == nil || o.Constraining == nil {
		return nil, false
	}
	return o.Constraining, true
}

// HasConstraining returns a boolean if a field has been set.
func (o *FilingSentiment) HasConstraining() bool {
	if o != nil && o.Constraining != nil {
		return true
	}

	return false
}

// SetConstraining gets a reference to the given float32 and assigns it to the Constraining field.
func (o *FilingSentiment) SetConstraining(v float32) {
	o.Constraining = &v
}

// GetModalWeak returns the ModalWeak field value if set, zero value otherwise.
func (o *FilingSentiment) GetModalWeak() float32 {
	if o == nil || o.ModalWeak == nil {
		var ret float32
		return ret
	}
	return *o.ModalWeak
}

// GetModalWeakOk returns a tuple with the ModalWeak field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilingSentiment) GetModalWeakOk() (*float32, bool) {
	if o == nil || o.ModalWeak == nil {
		return nil, false
	}
	return o.ModalWeak, true
}

// HasModalWeak returns a boolean if a field has been set.
func (o *FilingSentiment) HasModalWeak() bool {
	if o != nil && o.ModalWeak != nil {
		return true
	}

	return false
}

// SetModalWeak gets a reference to the given float32 and assigns it to the ModalWeak field.
func (o *FilingSentiment) SetModalWeak(v float32) {
	o.ModalWeak = &v
}

// GetModalStrong returns the ModalStrong field value if set, zero value otherwise.
func (o *FilingSentiment) GetModalStrong() float32 {
	if o == nil || o.ModalStrong == nil {
		var ret float32
		return ret
	}
	return *o.ModalStrong
}

// GetModalStrongOk returns a tuple with the ModalStrong field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilingSentiment) GetModalStrongOk() (*float32, bool) {
	if o == nil || o.ModalStrong == nil {
		return nil, false
	}
	return o.ModalStrong, true
}

// HasModalStrong returns a boolean if a field has been set.
func (o *FilingSentiment) HasModalStrong() bool {
	if o != nil && o.ModalStrong != nil {
		return true
	}

	return false
}

// SetModalStrong gets a reference to the given float32 and assigns it to the ModalStrong field.
func (o *FilingSentiment) SetModalStrong(v float32) {
	o.ModalStrong = &v
}

// GetModalModerate returns the ModalModerate field value if set, zero value otherwise.
func (o *FilingSentiment) GetModalModerate() float32 {
	if o == nil || o.ModalModerate == nil {
		var ret float32
		return ret
	}
	return *o.ModalModerate
}

// GetModalModerateOk returns a tuple with the ModalModerate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilingSentiment) GetModalModerateOk() (*float32, bool) {
	if o == nil || o.ModalModerate == nil {
		return nil, false
	}
	return o.ModalModerate, true
}

// HasModalModerate returns a boolean if a field has been set.
func (o *FilingSentiment) HasModalModerate() bool {
	if o != nil && o.ModalModerate != nil {
		return true
	}

	return false
}

// SetModalModerate gets a reference to the given float32 and assigns it to the ModalModerate field.
func (o *FilingSentiment) SetModalModerate(v float32) {
	o.ModalModerate = &v
}

func (o FilingSentiment) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Negative != nil {
		toSerialize["negative"] = o.Negative
	}
	if o.Positive != nil {
		toSerialize["positive"] = o.Positive
	}
	if o.Polarity != nil {
		toSerialize["polarity"] = o.Polarity
	}
	if o.Litigious != nil {
		toSerialize["litigious"] = o.Litigious
	}
	if o.Uncertainty != nil {
		toSerialize["uncertainty"] = o.Uncertainty
	}
	if o.Constraining != nil {
		toSerialize["constraining"] = o.Constraining
	}
	if o.ModalWeak != nil {
		toSerialize["modal-weak"] = o.ModalWeak
	}
	if o.ModalStrong != nil {
		toSerialize["modal-strong"] = o.ModalStrong
	}
	if o.ModalModerate != nil {
		toSerialize["modal-moderate"] = o.ModalModerate
	}
	return json.Marshal(toSerialize)
}

type NullableFilingSentiment struct {
	value *FilingSentiment
	isSet bool
}

func (v NullableFilingSentiment) Get() *FilingSentiment {
	return v.value
}

func (v *NullableFilingSentiment) Set(val *FilingSentiment) {
	v.value = val
	v.isSet = true
}

func (v NullableFilingSentiment) IsSet() bool {
	return v.isSet
}

func (v *NullableFilingSentiment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilingSentiment(val *FilingSentiment) *NullableFilingSentiment {
	return &NullableFilingSentiment{value: val, isSet: true}
}

func (v NullableFilingSentiment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilingSentiment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


