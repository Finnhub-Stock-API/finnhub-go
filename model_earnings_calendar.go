/*
Finnhub API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finnhub

import (
	"encoding/json"
)

// EarningsCalendar struct for EarningsCalendar
type EarningsCalendar struct {
	// Array of earnings release.
	EarningsCalendar *[]EarningRelease `json:"earningsCalendar,omitempty"`
}

// NewEarningsCalendar instantiates a new EarningsCalendar object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEarningsCalendar() *EarningsCalendar {
	this := EarningsCalendar{}
	return &this
}

// NewEarningsCalendarWithDefaults instantiates a new EarningsCalendar object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEarningsCalendarWithDefaults() *EarningsCalendar {
	this := EarningsCalendar{}
	return &this
}

// GetEarningsCalendar returns the EarningsCalendar field value if set, zero value otherwise.
func (o *EarningsCalendar) GetEarningsCalendar() []EarningRelease {
	if o == nil || o.EarningsCalendar == nil {
		var ret []EarningRelease
		return ret
	}
	return *o.EarningsCalendar
}

// GetEarningsCalendarOk returns a tuple with the EarningsCalendar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EarningsCalendar) GetEarningsCalendarOk() (*[]EarningRelease, bool) {
	if o == nil || o.EarningsCalendar == nil {
		return nil, false
	}
	return o.EarningsCalendar, true
}

// HasEarningsCalendar returns a boolean if a field has been set.
func (o *EarningsCalendar) HasEarningsCalendar() bool {
	if o != nil && o.EarningsCalendar != nil {
		return true
	}

	return false
}

// SetEarningsCalendar gets a reference to the given []EarningRelease and assigns it to the EarningsCalendar field.
func (o *EarningsCalendar) SetEarningsCalendar(v []EarningRelease) {
	o.EarningsCalendar = &v
}

func (o EarningsCalendar) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EarningsCalendar != nil {
		toSerialize["earningsCalendar"] = o.EarningsCalendar
	}
	return json.Marshal(toSerialize)
}

type NullableEarningsCalendar struct {
	value *EarningsCalendar
	isSet bool
}

func (v NullableEarningsCalendar) Get() *EarningsCalendar {
	return v.value
}

func (v *NullableEarningsCalendar) Set(val *EarningsCalendar) {
	v.value = val
	v.isSet = true
}

func (v NullableEarningsCalendar) IsSet() bool {
	return v.isSet
}

func (v *NullableEarningsCalendar) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEarningsCalendar(val *EarningsCalendar) *NullableEarningsCalendar {
	return &NullableEarningsCalendar{value: val, isSet: true}
}

func (v NullableEarningsCalendar) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEarningsCalendar) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


