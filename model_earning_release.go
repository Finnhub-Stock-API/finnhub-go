/*
Finnhub API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finnhub

import (
	"encoding/json"
)

// EarningRelease struct for EarningRelease
type EarningRelease struct {
	// Symbol.
	Symbol *string `json:"symbol,omitempty"`
	// Date.
	Date *string `json:"date,omitempty"`
	// Indicates whether the earnings is announced before market open(<code>bmo</code>), after market close(<code>amc</code>), or during market hour(<code>dmh</code>).
	Hour *string `json:"hour,omitempty"`
	// Earnings year.
	Year *int64 `json:"year,omitempty"`
	// Earnings quarter.
	Quarter *int64 `json:"quarter,omitempty"`
	// EPS estimate.
	EpsEstimate *float32 `json:"epsEstimate,omitempty"`
	// EPS actual.
	EpsActual *float32 `json:"epsActual,omitempty"`
	// Revenue estimate including Finnhub's proprietary estimates.
	RevenueEstimate *float32 `json:"revenueEstimate,omitempty"`
	// Revenue actual.
	RevenueActual *float32 `json:"revenueActual,omitempty"`
}

// NewEarningRelease instantiates a new EarningRelease object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEarningRelease() *EarningRelease {
	this := EarningRelease{}
	return &this
}

// NewEarningReleaseWithDefaults instantiates a new EarningRelease object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEarningReleaseWithDefaults() *EarningRelease {
	this := EarningRelease{}
	return &this
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *EarningRelease) GetSymbol() string {
	if o == nil || o.Symbol == nil {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EarningRelease) GetSymbolOk() (*string, bool) {
	if o == nil || o.Symbol == nil {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *EarningRelease) HasSymbol() bool {
	if o != nil && o.Symbol != nil {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *EarningRelease) SetSymbol(v string) {
	o.Symbol = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *EarningRelease) GetDate() string {
	if o == nil || o.Date == nil {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EarningRelease) GetDateOk() (*string, bool) {
	if o == nil || o.Date == nil {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *EarningRelease) HasDate() bool {
	if o != nil && o.Date != nil {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *EarningRelease) SetDate(v string) {
	o.Date = &v
}

// GetHour returns the Hour field value if set, zero value otherwise.
func (o *EarningRelease) GetHour() string {
	if o == nil || o.Hour == nil {
		var ret string
		return ret
	}
	return *o.Hour
}

// GetHourOk returns a tuple with the Hour field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EarningRelease) GetHourOk() (*string, bool) {
	if o == nil || o.Hour == nil {
		return nil, false
	}
	return o.Hour, true
}

// HasHour returns a boolean if a field has been set.
func (o *EarningRelease) HasHour() bool {
	if o != nil && o.Hour != nil {
		return true
	}

	return false
}

// SetHour gets a reference to the given string and assigns it to the Hour field.
func (o *EarningRelease) SetHour(v string) {
	o.Hour = &v
}

// GetYear returns the Year field value if set, zero value otherwise.
func (o *EarningRelease) GetYear() int64 {
	if o == nil || o.Year == nil {
		var ret int64
		return ret
	}
	return *o.Year
}

// GetYearOk returns a tuple with the Year field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EarningRelease) GetYearOk() (*int64, bool) {
	if o == nil || o.Year == nil {
		return nil, false
	}
	return o.Year, true
}

// HasYear returns a boolean if a field has been set.
func (o *EarningRelease) HasYear() bool {
	if o != nil && o.Year != nil {
		return true
	}

	return false
}

// SetYear gets a reference to the given int64 and assigns it to the Year field.
func (o *EarningRelease) SetYear(v int64) {
	o.Year = &v
}

// GetQuarter returns the Quarter field value if set, zero value otherwise.
func (o *EarningRelease) GetQuarter() int64 {
	if o == nil || o.Quarter == nil {
		var ret int64
		return ret
	}
	return *o.Quarter
}

// GetQuarterOk returns a tuple with the Quarter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EarningRelease) GetQuarterOk() (*int64, bool) {
	if o == nil || o.Quarter == nil {
		return nil, false
	}
	return o.Quarter, true
}

// HasQuarter returns a boolean if a field has been set.
func (o *EarningRelease) HasQuarter() bool {
	if o != nil && o.Quarter != nil {
		return true
	}

	return false
}

// SetQuarter gets a reference to the given int64 and assigns it to the Quarter field.
func (o *EarningRelease) SetQuarter(v int64) {
	o.Quarter = &v
}

// GetEpsEstimate returns the EpsEstimate field value if set, zero value otherwise.
func (o *EarningRelease) GetEpsEstimate() float32 {
	if o == nil || o.EpsEstimate == nil {
		var ret float32
		return ret
	}
	return *o.EpsEstimate
}

// GetEpsEstimateOk returns a tuple with the EpsEstimate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EarningRelease) GetEpsEstimateOk() (*float32, bool) {
	if o == nil || o.EpsEstimate == nil {
		return nil, false
	}
	return o.EpsEstimate, true
}

// HasEpsEstimate returns a boolean if a field has been set.
func (o *EarningRelease) HasEpsEstimate() bool {
	if o != nil && o.EpsEstimate != nil {
		return true
	}

	return false
}

// SetEpsEstimate gets a reference to the given float32 and assigns it to the EpsEstimate field.
func (o *EarningRelease) SetEpsEstimate(v float32) {
	o.EpsEstimate = &v
}

// GetEpsActual returns the EpsActual field value if set, zero value otherwise.
func (o *EarningRelease) GetEpsActual() float32 {
	if o == nil || o.EpsActual == nil {
		var ret float32
		return ret
	}
	return *o.EpsActual
}

// GetEpsActualOk returns a tuple with the EpsActual field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EarningRelease) GetEpsActualOk() (*float32, bool) {
	if o == nil || o.EpsActual == nil {
		return nil, false
	}
	return o.EpsActual, true
}

// HasEpsActual returns a boolean if a field has been set.
func (o *EarningRelease) HasEpsActual() bool {
	if o != nil && o.EpsActual != nil {
		return true
	}

	return false
}

// SetEpsActual gets a reference to the given float32 and assigns it to the EpsActual field.
func (o *EarningRelease) SetEpsActual(v float32) {
	o.EpsActual = &v
}

// GetRevenueEstimate returns the RevenueEstimate field value if set, zero value otherwise.
func (o *EarningRelease) GetRevenueEstimate() float32 {
	if o == nil || o.RevenueEstimate == nil {
		var ret float32
		return ret
	}
	return *o.RevenueEstimate
}

// GetRevenueEstimateOk returns a tuple with the RevenueEstimate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EarningRelease) GetRevenueEstimateOk() (*float32, bool) {
	if o == nil || o.RevenueEstimate == nil {
		return nil, false
	}
	return o.RevenueEstimate, true
}

// HasRevenueEstimate returns a boolean if a field has been set.
func (o *EarningRelease) HasRevenueEstimate() bool {
	if o != nil && o.RevenueEstimate != nil {
		return true
	}

	return false
}

// SetRevenueEstimate gets a reference to the given float32 and assigns it to the RevenueEstimate field.
func (o *EarningRelease) SetRevenueEstimate(v float32) {
	o.RevenueEstimate = &v
}

// GetRevenueActual returns the RevenueActual field value if set, zero value otherwise.
func (o *EarningRelease) GetRevenueActual() float32 {
	if o == nil || o.RevenueActual == nil {
		var ret float32
		return ret
	}
	return *o.RevenueActual
}

// GetRevenueActualOk returns a tuple with the RevenueActual field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EarningRelease) GetRevenueActualOk() (*float32, bool) {
	if o == nil || o.RevenueActual == nil {
		return nil, false
	}
	return o.RevenueActual, true
}

// HasRevenueActual returns a boolean if a field has been set.
func (o *EarningRelease) HasRevenueActual() bool {
	if o != nil && o.RevenueActual != nil {
		return true
	}

	return false
}

// SetRevenueActual gets a reference to the given float32 and assigns it to the RevenueActual field.
func (o *EarningRelease) SetRevenueActual(v float32) {
	o.RevenueActual = &v
}

func (o EarningRelease) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Symbol != nil {
		toSerialize["symbol"] = o.Symbol
	}
	if o.Date != nil {
		toSerialize["date"] = o.Date
	}
	if o.Hour != nil {
		toSerialize["hour"] = o.Hour
	}
	if o.Year != nil {
		toSerialize["year"] = o.Year
	}
	if o.Quarter != nil {
		toSerialize["quarter"] = o.Quarter
	}
	if o.EpsEstimate != nil {
		toSerialize["epsEstimate"] = o.EpsEstimate
	}
	if o.EpsActual != nil {
		toSerialize["epsActual"] = o.EpsActual
	}
	if o.RevenueEstimate != nil {
		toSerialize["revenueEstimate"] = o.RevenueEstimate
	}
	if o.RevenueActual != nil {
		toSerialize["revenueActual"] = o.RevenueActual
	}
	return json.Marshal(toSerialize)
}

type NullableEarningRelease struct {
	value *EarningRelease
	isSet bool
}

func (v NullableEarningRelease) Get() *EarningRelease {
	return v.value
}

func (v *NullableEarningRelease) Set(val *EarningRelease) {
	v.value = val
	v.isSet = true
}

func (v NullableEarningRelease) IsSet() bool {
	return v.isSet
}

func (v *NullableEarningRelease) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEarningRelease(val *EarningRelease) *NullableEarningRelease {
	return &NullableEarningRelease{value: val, isSet: true}
}

func (v NullableEarningRelease) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEarningRelease) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


