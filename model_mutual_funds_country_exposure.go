/*
 * Finnhub API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finnhub

import (
	"encoding/json"
)

// MutualFundsCountryExposure struct for MutualFundsCountryExposure
type MutualFundsCountryExposure struct {
	// Symbol.
	Symbol *string `json:"symbol,omitempty"`
	// Array of countries and and exposure levels.
	CountryExposure *[]map[string]interface{} `json:"countryExposure,omitempty"`
}

// NewMutualFundsCountryExposure instantiates a new MutualFundsCountryExposure object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMutualFundsCountryExposure() *MutualFundsCountryExposure {
	this := MutualFundsCountryExposure{}
	return &this
}

// NewMutualFundsCountryExposureWithDefaults instantiates a new MutualFundsCountryExposure object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMutualFundsCountryExposureWithDefaults() *MutualFundsCountryExposure {
	this := MutualFundsCountryExposure{}
	return &this
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *MutualFundsCountryExposure) GetSymbol() string {
	if o == nil || o.Symbol == nil {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MutualFundsCountryExposure) GetSymbolOk() (*string, bool) {
	if o == nil || o.Symbol == nil {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *MutualFundsCountryExposure) HasSymbol() bool {
	if o != nil && o.Symbol != nil {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *MutualFundsCountryExposure) SetSymbol(v string) {
	o.Symbol = &v
}

// GetCountryExposure returns the CountryExposure field value if set, zero value otherwise.
func (o *MutualFundsCountryExposure) GetCountryExposure() []map[string]interface{} {
	if o == nil || o.CountryExposure == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.CountryExposure
}

// GetCountryExposureOk returns a tuple with the CountryExposure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MutualFundsCountryExposure) GetCountryExposureOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.CountryExposure == nil {
		return nil, false
	}
	return o.CountryExposure, true
}

// HasCountryExposure returns a boolean if a field has been set.
func (o *MutualFundsCountryExposure) HasCountryExposure() bool {
	if o != nil && o.CountryExposure != nil {
		return true
	}

	return false
}

// SetCountryExposure gets a reference to the given []map[string]interface{} and assigns it to the CountryExposure field.
func (o *MutualFundsCountryExposure) SetCountryExposure(v []map[string]interface{}) {
	o.CountryExposure = &v
}

func (o MutualFundsCountryExposure) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Symbol != nil {
		toSerialize["symbol"] = o.Symbol
	}
	if o.CountryExposure != nil {
		toSerialize["countryExposure"] = o.CountryExposure
	}
	return json.Marshal(toSerialize)
}

type NullableMutualFundsCountryExposure struct {
	value *MutualFundsCountryExposure
	isSet bool
}

func (v NullableMutualFundsCountryExposure) Get() *MutualFundsCountryExposure {
	return v.value
}

func (v *NullableMutualFundsCountryExposure) Set(val *MutualFundsCountryExposure) {
	v.value = val
	v.isSet = true
}

func (v NullableMutualFundsCountryExposure) IsSet() bool {
	return v.isSet
}

func (v *NullableMutualFundsCountryExposure) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMutualFundsCountryExposure(val *MutualFundsCountryExposure) *NullableMutualFundsCountryExposure {
	return &NullableMutualFundsCountryExposure{value: val, isSet: true}
}

func (v NullableMutualFundsCountryExposure) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMutualFundsCountryExposure) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


