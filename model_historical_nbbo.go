/*
Finnhub API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finnhub

import (
	"encoding/json"
)

// HistoricalNBBO struct for HistoricalNBBO
type HistoricalNBBO struct {
	// Symbol.
	S *string `json:"s,omitempty"`
	// Number of ticks skipped.
	Skip *int64 `json:"skip,omitempty"`
	// Number of ticks returned. If <code>count</code> < <code>limit</code>, all data for that date has been returned.
	Count *int64 `json:"count,omitempty"`
	// Total number of ticks for that date.
	Total *int64 `json:"total,omitempty"`
	// List of Ask volume data.
	Av *[]float32 `json:"av,omitempty"`
	// List of Ask price data.
	A *[]float32 `json:"a,omitempty"`
	// List of venues/exchanges - Ask price. A list of exchange codes can be found <a target=\"_blank\" href=\"https://docs.google.com/spreadsheets/d/1Tj53M1svmr-hfEtbk6_NpVR1yAyGLMaH6ByYU6CG0ZY/edit?usp=sharing\",>here</a>
	Ax *[]string `json:"ax,omitempty"`
	// List of Bid volume data.
	Bv *[]float32 `json:"bv,omitempty"`
	// List of Bid price data.
	B *[]float32 `json:"b,omitempty"`
	// List of venues/exchanges - Bid price. A list of exchange codes can be found <a target=\"_blank\" href=\"https://docs.google.com/spreadsheets/d/1Tj53M1svmr-hfEtbk6_NpVR1yAyGLMaH6ByYU6CG0ZY/edit?usp=sharing\",>here</a>
	Bx *[]string `json:"bx,omitempty"`
	// List of timestamp in UNIX ms.
	T *[]int64 `json:"t,omitempty"`
	// List of quote conditions. A comprehensive list of quote conditions code can be found <a target=\"_blank\" href=\"https://docs.google.com/spreadsheets/d/1iiA6e7Osdtai0oPMOUzgAIKXCsay89dFDmsegz6OpEg/edit?usp=sharing\">here</a>
	C *[][]string `json:"c,omitempty"`
}

// NewHistoricalNBBO instantiates a new HistoricalNBBO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistoricalNBBO() *HistoricalNBBO {
	this := HistoricalNBBO{}
	return &this
}

// NewHistoricalNBBOWithDefaults instantiates a new HistoricalNBBO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistoricalNBBOWithDefaults() *HistoricalNBBO {
	this := HistoricalNBBO{}
	return &this
}

// GetS returns the S field value if set, zero value otherwise.
func (o *HistoricalNBBO) GetS() string {
	if o == nil || o.S == nil {
		var ret string
		return ret
	}
	return *o.S
}

// GetSOk returns a tuple with the S field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoricalNBBO) GetSOk() (*string, bool) {
	if o == nil || o.S == nil {
		return nil, false
	}
	return o.S, true
}

// HasS returns a boolean if a field has been set.
func (o *HistoricalNBBO) HasS() bool {
	if o != nil && o.S != nil {
		return true
	}

	return false
}

// SetS gets a reference to the given string and assigns it to the S field.
func (o *HistoricalNBBO) SetS(v string) {
	o.S = &v
}

// GetSkip returns the Skip field value if set, zero value otherwise.
func (o *HistoricalNBBO) GetSkip() int64 {
	if o == nil || o.Skip == nil {
		var ret int64
		return ret
	}
	return *o.Skip
}

// GetSkipOk returns a tuple with the Skip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoricalNBBO) GetSkipOk() (*int64, bool) {
	if o == nil || o.Skip == nil {
		return nil, false
	}
	return o.Skip, true
}

// HasSkip returns a boolean if a field has been set.
func (o *HistoricalNBBO) HasSkip() bool {
	if o != nil && o.Skip != nil {
		return true
	}

	return false
}

// SetSkip gets a reference to the given int64 and assigns it to the Skip field.
func (o *HistoricalNBBO) SetSkip(v int64) {
	o.Skip = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *HistoricalNBBO) GetCount() int64 {
	if o == nil || o.Count == nil {
		var ret int64
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoricalNBBO) GetCountOk() (*int64, bool) {
	if o == nil || o.Count == nil {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *HistoricalNBBO) HasCount() bool {
	if o != nil && o.Count != nil {
		return true
	}

	return false
}

// SetCount gets a reference to the given int64 and assigns it to the Count field.
func (o *HistoricalNBBO) SetCount(v int64) {
	o.Count = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *HistoricalNBBO) GetTotal() int64 {
	if o == nil || o.Total == nil {
		var ret int64
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoricalNBBO) GetTotalOk() (*int64, bool) {
	if o == nil || o.Total == nil {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *HistoricalNBBO) HasTotal() bool {
	if o != nil && o.Total != nil {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int64 and assigns it to the Total field.
func (o *HistoricalNBBO) SetTotal(v int64) {
	o.Total = &v
}

// GetAv returns the Av field value if set, zero value otherwise.
func (o *HistoricalNBBO) GetAv() []float32 {
	if o == nil || o.Av == nil {
		var ret []float32
		return ret
	}
	return *o.Av
}

// GetAvOk returns a tuple with the Av field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoricalNBBO) GetAvOk() (*[]float32, bool) {
	if o == nil || o.Av == nil {
		return nil, false
	}
	return o.Av, true
}

// HasAv returns a boolean if a field has been set.
func (o *HistoricalNBBO) HasAv() bool {
	if o != nil && o.Av != nil {
		return true
	}

	return false
}

// SetAv gets a reference to the given []float32 and assigns it to the Av field.
func (o *HistoricalNBBO) SetAv(v []float32) {
	o.Av = &v
}

// GetA returns the A field value if set, zero value otherwise.
func (o *HistoricalNBBO) GetA() []float32 {
	if o == nil || o.A == nil {
		var ret []float32
		return ret
	}
	return *o.A
}

// GetAOk returns a tuple with the A field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoricalNBBO) GetAOk() (*[]float32, bool) {
	if o == nil || o.A == nil {
		return nil, false
	}
	return o.A, true
}

// HasA returns a boolean if a field has been set.
func (o *HistoricalNBBO) HasA() bool {
	if o != nil && o.A != nil {
		return true
	}

	return false
}

// SetA gets a reference to the given []float32 and assigns it to the A field.
func (o *HistoricalNBBO) SetA(v []float32) {
	o.A = &v
}

// GetAx returns the Ax field value if set, zero value otherwise.
func (o *HistoricalNBBO) GetAx() []string {
	if o == nil || o.Ax == nil {
		var ret []string
		return ret
	}
	return *o.Ax
}

// GetAxOk returns a tuple with the Ax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoricalNBBO) GetAxOk() (*[]string, bool) {
	if o == nil || o.Ax == nil {
		return nil, false
	}
	return o.Ax, true
}

// HasAx returns a boolean if a field has been set.
func (o *HistoricalNBBO) HasAx() bool {
	if o != nil && o.Ax != nil {
		return true
	}

	return false
}

// SetAx gets a reference to the given []string and assigns it to the Ax field.
func (o *HistoricalNBBO) SetAx(v []string) {
	o.Ax = &v
}

// GetBv returns the Bv field value if set, zero value otherwise.
func (o *HistoricalNBBO) GetBv() []float32 {
	if o == nil || o.Bv == nil {
		var ret []float32
		return ret
	}
	return *o.Bv
}

// GetBvOk returns a tuple with the Bv field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoricalNBBO) GetBvOk() (*[]float32, bool) {
	if o == nil || o.Bv == nil {
		return nil, false
	}
	return o.Bv, true
}

// HasBv returns a boolean if a field has been set.
func (o *HistoricalNBBO) HasBv() bool {
	if o != nil && o.Bv != nil {
		return true
	}

	return false
}

// SetBv gets a reference to the given []float32 and assigns it to the Bv field.
func (o *HistoricalNBBO) SetBv(v []float32) {
	o.Bv = &v
}

// GetB returns the B field value if set, zero value otherwise.
func (o *HistoricalNBBO) GetB() []float32 {
	if o == nil || o.B == nil {
		var ret []float32
		return ret
	}
	return *o.B
}

// GetBOk returns a tuple with the B field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoricalNBBO) GetBOk() (*[]float32, bool) {
	if o == nil || o.B == nil {
		return nil, false
	}
	return o.B, true
}

// HasB returns a boolean if a field has been set.
func (o *HistoricalNBBO) HasB() bool {
	if o != nil && o.B != nil {
		return true
	}

	return false
}

// SetB gets a reference to the given []float32 and assigns it to the B field.
func (o *HistoricalNBBO) SetB(v []float32) {
	o.B = &v
}

// GetBx returns the Bx field value if set, zero value otherwise.
func (o *HistoricalNBBO) GetBx() []string {
	if o == nil || o.Bx == nil {
		var ret []string
		return ret
	}
	return *o.Bx
}

// GetBxOk returns a tuple with the Bx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoricalNBBO) GetBxOk() (*[]string, bool) {
	if o == nil || o.Bx == nil {
		return nil, false
	}
	return o.Bx, true
}

// HasBx returns a boolean if a field has been set.
func (o *HistoricalNBBO) HasBx() bool {
	if o != nil && o.Bx != nil {
		return true
	}

	return false
}

// SetBx gets a reference to the given []string and assigns it to the Bx field.
func (o *HistoricalNBBO) SetBx(v []string) {
	o.Bx = &v
}

// GetT returns the T field value if set, zero value otherwise.
func (o *HistoricalNBBO) GetT() []int64 {
	if o == nil || o.T == nil {
		var ret []int64
		return ret
	}
	return *o.T
}

// GetTOk returns a tuple with the T field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoricalNBBO) GetTOk() (*[]int64, bool) {
	if o == nil || o.T == nil {
		return nil, false
	}
	return o.T, true
}

// HasT returns a boolean if a field has been set.
func (o *HistoricalNBBO) HasT() bool {
	if o != nil && o.T != nil {
		return true
	}

	return false
}

// SetT gets a reference to the given []int64 and assigns it to the T field.
func (o *HistoricalNBBO) SetT(v []int64) {
	o.T = &v
}

// GetC returns the C field value if set, zero value otherwise.
func (o *HistoricalNBBO) GetC() [][]string {
	if o == nil || o.C == nil {
		var ret [][]string
		return ret
	}
	return *o.C
}

// GetCOk returns a tuple with the C field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoricalNBBO) GetCOk() (*[][]string, bool) {
	if o == nil || o.C == nil {
		return nil, false
	}
	return o.C, true
}

// HasC returns a boolean if a field has been set.
func (o *HistoricalNBBO) HasC() bool {
	if o != nil && o.C != nil {
		return true
	}

	return false
}

// SetC gets a reference to the given [][]string and assigns it to the C field.
func (o *HistoricalNBBO) SetC(v [][]string) {
	o.C = &v
}

func (o HistoricalNBBO) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.S != nil {
		toSerialize["s"] = o.S
	}
	if o.Skip != nil {
		toSerialize["skip"] = o.Skip
	}
	if o.Count != nil {
		toSerialize["count"] = o.Count
	}
	if o.Total != nil {
		toSerialize["total"] = o.Total
	}
	if o.Av != nil {
		toSerialize["av"] = o.Av
	}
	if o.A != nil {
		toSerialize["a"] = o.A
	}
	if o.Ax != nil {
		toSerialize["ax"] = o.Ax
	}
	if o.Bv != nil {
		toSerialize["bv"] = o.Bv
	}
	if o.B != nil {
		toSerialize["b"] = o.B
	}
	if o.Bx != nil {
		toSerialize["bx"] = o.Bx
	}
	if o.T != nil {
		toSerialize["t"] = o.T
	}
	if o.C != nil {
		toSerialize["c"] = o.C
	}
	return json.Marshal(toSerialize)
}

type NullableHistoricalNBBO struct {
	value *HistoricalNBBO
	isSet bool
}

func (v NullableHistoricalNBBO) Get() *HistoricalNBBO {
	return v.value
}

func (v *NullableHistoricalNBBO) Set(val *HistoricalNBBO) {
	v.value = val
	v.isSet = true
}

func (v NullableHistoricalNBBO) IsSet() bool {
	return v.isSet
}

func (v *NullableHistoricalNBBO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistoricalNBBO(val *HistoricalNBBO) *NullableHistoricalNBBO {
	return &NullableHistoricalNBBO{value: val, isSet: true}
}

func (v NullableHistoricalNBBO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistoricalNBBO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


