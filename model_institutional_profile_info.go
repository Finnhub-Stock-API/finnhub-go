/*
Finnhub API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finnhub

import (
	"encoding/json"
)

// InstitutionalProfileInfo struct for InstitutionalProfileInfo
type InstitutionalProfileInfo struct {
	// Investor's company CIK.
	Cik *string `json:"cik,omitempty"`
	// Firm type.
	FirmType *string `json:"firmType,omitempty"`
	// Manager.
	Manager *string `json:"manager,omitempty"`
	// Investing philosophy.
	Philosophy *string `json:"philosophy,omitempty"`
	// Profile info.
	Profile *string `json:"profile,omitempty"`
	// Profile image.
	ProfileImg *string `json:"profileImg,omitempty"`
}

// NewInstitutionalProfileInfo instantiates a new InstitutionalProfileInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstitutionalProfileInfo() *InstitutionalProfileInfo {
	this := InstitutionalProfileInfo{}
	return &this
}

// NewInstitutionalProfileInfoWithDefaults instantiates a new InstitutionalProfileInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstitutionalProfileInfoWithDefaults() *InstitutionalProfileInfo {
	this := InstitutionalProfileInfo{}
	return &this
}

// GetCik returns the Cik field value if set, zero value otherwise.
func (o *InstitutionalProfileInfo) GetCik() string {
	if o == nil || o.Cik == nil {
		var ret string
		return ret
	}
	return *o.Cik
}

// GetCikOk returns a tuple with the Cik field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstitutionalProfileInfo) GetCikOk() (*string, bool) {
	if o == nil || o.Cik == nil {
		return nil, false
	}
	return o.Cik, true
}

// HasCik returns a boolean if a field has been set.
func (o *InstitutionalProfileInfo) HasCik() bool {
	if o != nil && o.Cik != nil {
		return true
	}

	return false
}

// SetCik gets a reference to the given string and assigns it to the Cik field.
func (o *InstitutionalProfileInfo) SetCik(v string) {
	o.Cik = &v
}

// GetFirmType returns the FirmType field value if set, zero value otherwise.
func (o *InstitutionalProfileInfo) GetFirmType() string {
	if o == nil || o.FirmType == nil {
		var ret string
		return ret
	}
	return *o.FirmType
}

// GetFirmTypeOk returns a tuple with the FirmType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstitutionalProfileInfo) GetFirmTypeOk() (*string, bool) {
	if o == nil || o.FirmType == nil {
		return nil, false
	}
	return o.FirmType, true
}

// HasFirmType returns a boolean if a field has been set.
func (o *InstitutionalProfileInfo) HasFirmType() bool {
	if o != nil && o.FirmType != nil {
		return true
	}

	return false
}

// SetFirmType gets a reference to the given string and assigns it to the FirmType field.
func (o *InstitutionalProfileInfo) SetFirmType(v string) {
	o.FirmType = &v
}

// GetManager returns the Manager field value if set, zero value otherwise.
func (o *InstitutionalProfileInfo) GetManager() string {
	if o == nil || o.Manager == nil {
		var ret string
		return ret
	}
	return *o.Manager
}

// GetManagerOk returns a tuple with the Manager field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstitutionalProfileInfo) GetManagerOk() (*string, bool) {
	if o == nil || o.Manager == nil {
		return nil, false
	}
	return o.Manager, true
}

// HasManager returns a boolean if a field has been set.
func (o *InstitutionalProfileInfo) HasManager() bool {
	if o != nil && o.Manager != nil {
		return true
	}

	return false
}

// SetManager gets a reference to the given string and assigns it to the Manager field.
func (o *InstitutionalProfileInfo) SetManager(v string) {
	o.Manager = &v
}

// GetPhilosophy returns the Philosophy field value if set, zero value otherwise.
func (o *InstitutionalProfileInfo) GetPhilosophy() string {
	if o == nil || o.Philosophy == nil {
		var ret string
		return ret
	}
	return *o.Philosophy
}

// GetPhilosophyOk returns a tuple with the Philosophy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstitutionalProfileInfo) GetPhilosophyOk() (*string, bool) {
	if o == nil || o.Philosophy == nil {
		return nil, false
	}
	return o.Philosophy, true
}

// HasPhilosophy returns a boolean if a field has been set.
func (o *InstitutionalProfileInfo) HasPhilosophy() bool {
	if o != nil && o.Philosophy != nil {
		return true
	}

	return false
}

// SetPhilosophy gets a reference to the given string and assigns it to the Philosophy field.
func (o *InstitutionalProfileInfo) SetPhilosophy(v string) {
	o.Philosophy = &v
}

// GetProfile returns the Profile field value if set, zero value otherwise.
func (o *InstitutionalProfileInfo) GetProfile() string {
	if o == nil || o.Profile == nil {
		var ret string
		return ret
	}
	return *o.Profile
}

// GetProfileOk returns a tuple with the Profile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstitutionalProfileInfo) GetProfileOk() (*string, bool) {
	if o == nil || o.Profile == nil {
		return nil, false
	}
	return o.Profile, true
}

// HasProfile returns a boolean if a field has been set.
func (o *InstitutionalProfileInfo) HasProfile() bool {
	if o != nil && o.Profile != nil {
		return true
	}

	return false
}

// SetProfile gets a reference to the given string and assigns it to the Profile field.
func (o *InstitutionalProfileInfo) SetProfile(v string) {
	o.Profile = &v
}

// GetProfileImg returns the ProfileImg field value if set, zero value otherwise.
func (o *InstitutionalProfileInfo) GetProfileImg() string {
	if o == nil || o.ProfileImg == nil {
		var ret string
		return ret
	}
	return *o.ProfileImg
}

// GetProfileImgOk returns a tuple with the ProfileImg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstitutionalProfileInfo) GetProfileImgOk() (*string, bool) {
	if o == nil || o.ProfileImg == nil {
		return nil, false
	}
	return o.ProfileImg, true
}

// HasProfileImg returns a boolean if a field has been set.
func (o *InstitutionalProfileInfo) HasProfileImg() bool {
	if o != nil && o.ProfileImg != nil {
		return true
	}

	return false
}

// SetProfileImg gets a reference to the given string and assigns it to the ProfileImg field.
func (o *InstitutionalProfileInfo) SetProfileImg(v string) {
	o.ProfileImg = &v
}

func (o InstitutionalProfileInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Cik != nil {
		toSerialize["cik"] = o.Cik
	}
	if o.FirmType != nil {
		toSerialize["firmType"] = o.FirmType
	}
	if o.Manager != nil {
		toSerialize["manager"] = o.Manager
	}
	if o.Philosophy != nil {
		toSerialize["philosophy"] = o.Philosophy
	}
	if o.Profile != nil {
		toSerialize["profile"] = o.Profile
	}
	if o.ProfileImg != nil {
		toSerialize["profileImg"] = o.ProfileImg
	}
	return json.Marshal(toSerialize)
}

type NullableInstitutionalProfileInfo struct {
	value *InstitutionalProfileInfo
	isSet bool
}

func (v NullableInstitutionalProfileInfo) Get() *InstitutionalProfileInfo {
	return v.value
}

func (v *NullableInstitutionalProfileInfo) Set(val *InstitutionalProfileInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableInstitutionalProfileInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableInstitutionalProfileInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstitutionalProfileInfo(val *InstitutionalProfileInfo) *NullableInstitutionalProfileInfo {
	return &NullableInstitutionalProfileInfo{value: val, isSet: true}
}

func (v NullableInstitutionalProfileInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstitutionalProfileInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


