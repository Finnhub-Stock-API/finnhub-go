/*
 * Finnhub API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finnhub

import (
	"encoding/json"
)

// Investor struct for Investor
type Investor struct {
	// Investor's name.
	Name *string `json:"name,omitempty"`
	// Number of shares held by the investor.
	Share *int64 `json:"share,omitempty"`
	// Number of share changed (net buy or sell) from the last period.
	Change *int64 `json:"change,omitempty"`
	// Filing date.
	FilingDate *string `json:"filingDate,omitempty"`
}

// NewInvestor instantiates a new Investor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvestor() *Investor {
	this := Investor{}
	return &this
}

// NewInvestorWithDefaults instantiates a new Investor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvestorWithDefaults() *Investor {
	this := Investor{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Investor) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Investor) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Investor) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Investor) SetName(v string) {
	o.Name = &v
}

// GetShare returns the Share field value if set, zero value otherwise.
func (o *Investor) GetShare() int64 {
	if o == nil || o.Share == nil {
		var ret int64
		return ret
	}
	return *o.Share
}

// GetShareOk returns a tuple with the Share field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Investor) GetShareOk() (*int64, bool) {
	if o == nil || o.Share == nil {
		return nil, false
	}
	return o.Share, true
}

// HasShare returns a boolean if a field has been set.
func (o *Investor) HasShare() bool {
	if o != nil && o.Share != nil {
		return true
	}

	return false
}

// SetShare gets a reference to the given int64 and assigns it to the Share field.
func (o *Investor) SetShare(v int64) {
	o.Share = &v
}

// GetChange returns the Change field value if set, zero value otherwise.
func (o *Investor) GetChange() int64 {
	if o == nil || o.Change == nil {
		var ret int64
		return ret
	}
	return *o.Change
}

// GetChangeOk returns a tuple with the Change field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Investor) GetChangeOk() (*int64, bool) {
	if o == nil || o.Change == nil {
		return nil, false
	}
	return o.Change, true
}

// HasChange returns a boolean if a field has been set.
func (o *Investor) HasChange() bool {
	if o != nil && o.Change != nil {
		return true
	}

	return false
}

// SetChange gets a reference to the given int64 and assigns it to the Change field.
func (o *Investor) SetChange(v int64) {
	o.Change = &v
}

// GetFilingDate returns the FilingDate field value if set, zero value otherwise.
func (o *Investor) GetFilingDate() string {
	if o == nil || o.FilingDate == nil {
		var ret string
		return ret
	}
	return *o.FilingDate
}

// GetFilingDateOk returns a tuple with the FilingDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Investor) GetFilingDateOk() (*string, bool) {
	if o == nil || o.FilingDate == nil {
		return nil, false
	}
	return o.FilingDate, true
}

// HasFilingDate returns a boolean if a field has been set.
func (o *Investor) HasFilingDate() bool {
	if o != nil && o.FilingDate != nil {
		return true
	}

	return false
}

// SetFilingDate gets a reference to the given string and assigns it to the FilingDate field.
func (o *Investor) SetFilingDate(v string) {
	o.FilingDate = &v
}

func (o Investor) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Share != nil {
		toSerialize["share"] = o.Share
	}
	if o.Change != nil {
		toSerialize["change"] = o.Change
	}
	if o.FilingDate != nil {
		toSerialize["filingDate"] = o.FilingDate
	}
	return json.Marshal(toSerialize)
}

type NullableInvestor struct {
	value *Investor
	isSet bool
}

func (v NullableInvestor) Get() *Investor {
	return v.value
}

func (v *NullableInvestor) Set(val *Investor) {
	v.value = val
	v.isSet = true
}

func (v NullableInvestor) IsSet() bool {
	return v.isSet
}

func (v *NullableInvestor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvestor(val *Investor) *NullableInvestor {
	return &NullableInvestor{value: val, isSet: true}
}

func (v NullableInvestor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvestor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


