/*
Finnhub API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finnhub

import (
	"encoding/json"
)

// MutualFundCountryExposure struct for MutualFundCountryExposure
type MutualFundCountryExposure struct {
	// Symbol.
	Symbol *string `json:"symbol,omitempty"`
	// Array of countries and and exposure levels.
	CountryExposure *[]MutualFundCountryExposureData `json:"countryExposure,omitempty"`
}

// NewMutualFundCountryExposure instantiates a new MutualFundCountryExposure object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMutualFundCountryExposure() *MutualFundCountryExposure {
	this := MutualFundCountryExposure{}
	return &this
}

// NewMutualFundCountryExposureWithDefaults instantiates a new MutualFundCountryExposure object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMutualFundCountryExposureWithDefaults() *MutualFundCountryExposure {
	this := MutualFundCountryExposure{}
	return &this
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *MutualFundCountryExposure) GetSymbol() string {
	if o == nil || o.Symbol == nil {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MutualFundCountryExposure) GetSymbolOk() (*string, bool) {
	if o == nil || o.Symbol == nil {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *MutualFundCountryExposure) HasSymbol() bool {
	if o != nil && o.Symbol != nil {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *MutualFundCountryExposure) SetSymbol(v string) {
	o.Symbol = &v
}

// GetCountryExposure returns the CountryExposure field value if set, zero value otherwise.
func (o *MutualFundCountryExposure) GetCountryExposure() []MutualFundCountryExposureData {
	if o == nil || o.CountryExposure == nil {
		var ret []MutualFundCountryExposureData
		return ret
	}
	return *o.CountryExposure
}

// GetCountryExposureOk returns a tuple with the CountryExposure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MutualFundCountryExposure) GetCountryExposureOk() (*[]MutualFundCountryExposureData, bool) {
	if o == nil || o.CountryExposure == nil {
		return nil, false
	}
	return o.CountryExposure, true
}

// HasCountryExposure returns a boolean if a field has been set.
func (o *MutualFundCountryExposure) HasCountryExposure() bool {
	if o != nil && o.CountryExposure != nil {
		return true
	}

	return false
}

// SetCountryExposure gets a reference to the given []MutualFundCountryExposureData and assigns it to the CountryExposure field.
func (o *MutualFundCountryExposure) SetCountryExposure(v []MutualFundCountryExposureData) {
	o.CountryExposure = &v
}

func (o MutualFundCountryExposure) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Symbol != nil {
		toSerialize["symbol"] = o.Symbol
	}
	if o.CountryExposure != nil {
		toSerialize["countryExposure"] = o.CountryExposure
	}
	return json.Marshal(toSerialize)
}

type NullableMutualFundCountryExposure struct {
	value *MutualFundCountryExposure
	isSet bool
}

func (v NullableMutualFundCountryExposure) Get() *MutualFundCountryExposure {
	return v.value
}

func (v *NullableMutualFundCountryExposure) Set(val *MutualFundCountryExposure) {
	v.value = val
	v.isSet = true
}

func (v NullableMutualFundCountryExposure) IsSet() bool {
	return v.isSet
}

func (v *NullableMutualFundCountryExposure) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMutualFundCountryExposure(val *MutualFundCountryExposure) *NullableMutualFundCountryExposure {
	return &NullableMutualFundCountryExposure{value: val, isSet: true}
}

func (v NullableMutualFundCountryExposure) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMutualFundCountryExposure) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


