/*
Finnhub API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finnhub

import (
	"encoding/json"
)

// BondTickData struct for BondTickData
type BondTickData struct {
	// Number of ticks skipped.
	Skip *int64 `json:"skip,omitempty"`
	// Number of ticks returned. If <code>count</code> < <code>limit</code>, all data for that date has been returned.
	Count *int64 `json:"count,omitempty"`
	// Total number of ticks for that date.
	Total *int64 `json:"total,omitempty"`
	// List of volume data.
	V *[]float32 `json:"v,omitempty"`
	// List of price data.
	P *[]float32 `json:"p,omitempty"`
	// List of timestamp in UNIX ms.
	T *[]int64 `json:"t,omitempty"`
	// List of values showing the side (Buy/sell) of each trade. List of supported values: <a target=\"_blank\" href=\"https://docs.google.com/spreadsheets/d/1O3aueXSPOqo7Iuyz4PqDG6yZunHsX8BTefZ2kFk5pz4/edit?usp=sharing\",>here</a>
	Si *[]string `json:"si,omitempty"`
	// List of values showing the counterparty of each trade. List of supported values: <a target=\"_blank\" href=\"https://docs.google.com/spreadsheets/d/1O3aueXSPOqo7Iuyz4PqDG6yZunHsX8BTefZ2kFk5pz4/edit?usp=sharing\",>here</a>
	Cp *[]string `json:"cp,omitempty"`
	// List of trade conditions. A comprehensive list of trade conditions code can be found <a target=\"_blank\" href=\"https://docs.google.com/spreadsheets/d/1O3aueXSPOqo7Iuyz4PqDG6yZunHsX8BTefZ2kFk5pz4/edit?usp=sharing\">here</a>
	C *[][]string `json:"c,omitempty"`
}

// NewBondTickData instantiates a new BondTickData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBondTickData() *BondTickData {
	this := BondTickData{}
	return &this
}

// NewBondTickDataWithDefaults instantiates a new BondTickData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBondTickDataWithDefaults() *BondTickData {
	this := BondTickData{}
	return &this
}

// GetSkip returns the Skip field value if set, zero value otherwise.
func (o *BondTickData) GetSkip() int64 {
	if o == nil || o.Skip == nil {
		var ret int64
		return ret
	}
	return *o.Skip
}

// GetSkipOk returns a tuple with the Skip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondTickData) GetSkipOk() (*int64, bool) {
	if o == nil || o.Skip == nil {
		return nil, false
	}
	return o.Skip, true
}

// HasSkip returns a boolean if a field has been set.
func (o *BondTickData) HasSkip() bool {
	if o != nil && o.Skip != nil {
		return true
	}

	return false
}

// SetSkip gets a reference to the given int64 and assigns it to the Skip field.
func (o *BondTickData) SetSkip(v int64) {
	o.Skip = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *BondTickData) GetCount() int64 {
	if o == nil || o.Count == nil {
		var ret int64
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondTickData) GetCountOk() (*int64, bool) {
	if o == nil || o.Count == nil {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *BondTickData) HasCount() bool {
	if o != nil && o.Count != nil {
		return true
	}

	return false
}

// SetCount gets a reference to the given int64 and assigns it to the Count field.
func (o *BondTickData) SetCount(v int64) {
	o.Count = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *BondTickData) GetTotal() int64 {
	if o == nil || o.Total == nil {
		var ret int64
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondTickData) GetTotalOk() (*int64, bool) {
	if o == nil || o.Total == nil {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *BondTickData) HasTotal() bool {
	if o != nil && o.Total != nil {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int64 and assigns it to the Total field.
func (o *BondTickData) SetTotal(v int64) {
	o.Total = &v
}

// GetV returns the V field value if set, zero value otherwise.
func (o *BondTickData) GetV() []float32 {
	if o == nil || o.V == nil {
		var ret []float32
		return ret
	}
	return *o.V
}

// GetVOk returns a tuple with the V field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondTickData) GetVOk() (*[]float32, bool) {
	if o == nil || o.V == nil {
		return nil, false
	}
	return o.V, true
}

// HasV returns a boolean if a field has been set.
func (o *BondTickData) HasV() bool {
	if o != nil && o.V != nil {
		return true
	}

	return false
}

// SetV gets a reference to the given []float32 and assigns it to the V field.
func (o *BondTickData) SetV(v []float32) {
	o.V = &v
}

// GetP returns the P field value if set, zero value otherwise.
func (o *BondTickData) GetP() []float32 {
	if o == nil || o.P == nil {
		var ret []float32
		return ret
	}
	return *o.P
}

// GetPOk returns a tuple with the P field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondTickData) GetPOk() (*[]float32, bool) {
	if o == nil || o.P == nil {
		return nil, false
	}
	return o.P, true
}

// HasP returns a boolean if a field has been set.
func (o *BondTickData) HasP() bool {
	if o != nil && o.P != nil {
		return true
	}

	return false
}

// SetP gets a reference to the given []float32 and assigns it to the P field.
func (o *BondTickData) SetP(v []float32) {
	o.P = &v
}

// GetT returns the T field value if set, zero value otherwise.
func (o *BondTickData) GetT() []int64 {
	if o == nil || o.T == nil {
		var ret []int64
		return ret
	}
	return *o.T
}

// GetTOk returns a tuple with the T field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondTickData) GetTOk() (*[]int64, bool) {
	if o == nil || o.T == nil {
		return nil, false
	}
	return o.T, true
}

// HasT returns a boolean if a field has been set.
func (o *BondTickData) HasT() bool {
	if o != nil && o.T != nil {
		return true
	}

	return false
}

// SetT gets a reference to the given []int64 and assigns it to the T field.
func (o *BondTickData) SetT(v []int64) {
	o.T = &v
}

// GetSi returns the Si field value if set, zero value otherwise.
func (o *BondTickData) GetSi() []string {
	if o == nil || o.Si == nil {
		var ret []string
		return ret
	}
	return *o.Si
}

// GetSiOk returns a tuple with the Si field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondTickData) GetSiOk() (*[]string, bool) {
	if o == nil || o.Si == nil {
		return nil, false
	}
	return o.Si, true
}

// HasSi returns a boolean if a field has been set.
func (o *BondTickData) HasSi() bool {
	if o != nil && o.Si != nil {
		return true
	}

	return false
}

// SetSi gets a reference to the given []string and assigns it to the Si field.
func (o *BondTickData) SetSi(v []string) {
	o.Si = &v
}

// GetCp returns the Cp field value if set, zero value otherwise.
func (o *BondTickData) GetCp() []string {
	if o == nil || o.Cp == nil {
		var ret []string
		return ret
	}
	return *o.Cp
}

// GetCpOk returns a tuple with the Cp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondTickData) GetCpOk() (*[]string, bool) {
	if o == nil || o.Cp == nil {
		return nil, false
	}
	return o.Cp, true
}

// HasCp returns a boolean if a field has been set.
func (o *BondTickData) HasCp() bool {
	if o != nil && o.Cp != nil {
		return true
	}

	return false
}

// SetCp gets a reference to the given []string and assigns it to the Cp field.
func (o *BondTickData) SetCp(v []string) {
	o.Cp = &v
}

// GetC returns the C field value if set, zero value otherwise.
func (o *BondTickData) GetC() [][]string {
	if o == nil || o.C == nil {
		var ret [][]string
		return ret
	}
	return *o.C
}

// GetCOk returns a tuple with the C field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondTickData) GetCOk() (*[][]string, bool) {
	if o == nil || o.C == nil {
		return nil, false
	}
	return o.C, true
}

// HasC returns a boolean if a field has been set.
func (o *BondTickData) HasC() bool {
	if o != nil && o.C != nil {
		return true
	}

	return false
}

// SetC gets a reference to the given [][]string and assigns it to the C field.
func (o *BondTickData) SetC(v [][]string) {
	o.C = &v
}

func (o BondTickData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Skip != nil {
		toSerialize["skip"] = o.Skip
	}
	if o.Count != nil {
		toSerialize["count"] = o.Count
	}
	if o.Total != nil {
		toSerialize["total"] = o.Total
	}
	if o.V != nil {
		toSerialize["v"] = o.V
	}
	if o.P != nil {
		toSerialize["p"] = o.P
	}
	if o.T != nil {
		toSerialize["t"] = o.T
	}
	if o.Si != nil {
		toSerialize["si"] = o.Si
	}
	if o.Cp != nil {
		toSerialize["cp"] = o.Cp
	}
	if o.C != nil {
		toSerialize["c"] = o.C
	}
	return json.Marshal(toSerialize)
}

type NullableBondTickData struct {
	value *BondTickData
	isSet bool
}

func (v NullableBondTickData) Get() *BondTickData {
	return v.value
}

func (v *NullableBondTickData) Set(val *BondTickData) {
	v.value = val
	v.isSet = true
}

func (v NullableBondTickData) IsSet() bool {
	return v.isSet
}

func (v *NullableBondTickData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBondTickData(val *BondTickData) *NullableBondTickData {
	return &NullableBondTickData{value: val, isSet: true}
}

func (v NullableBondTickData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBondTickData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


