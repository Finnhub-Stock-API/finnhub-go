/*
Finnhub API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finnhub

import (
	"encoding/json"
)

// RecommendationTrend struct for RecommendationTrend
type RecommendationTrend struct {
	// Company symbol.
	Symbol *string `json:"symbol,omitempty"`
	// Number of recommendations that fall into the Buy category
	Buy *int64 `json:"buy,omitempty"`
	// Number of recommendations that fall into the Hold category
	Hold *int64 `json:"hold,omitempty"`
	// Updated period
	Period *string `json:"period,omitempty"`
	// Number of recommendations that fall into the Sell category
	Sell *int64 `json:"sell,omitempty"`
	// Number of recommendations that fall into the Strong Buy category
	StrongBuy *int64 `json:"strongBuy,omitempty"`
	// Number of recommendations that fall into the Strong Sell category
	StrongSell *int64 `json:"strongSell,omitempty"`
}

// NewRecommendationTrend instantiates a new RecommendationTrend object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecommendationTrend() *RecommendationTrend {
	this := RecommendationTrend{}
	return &this
}

// NewRecommendationTrendWithDefaults instantiates a new RecommendationTrend object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecommendationTrendWithDefaults() *RecommendationTrend {
	this := RecommendationTrend{}
	return &this
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *RecommendationTrend) GetSymbol() string {
	if o == nil || o.Symbol == nil {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendationTrend) GetSymbolOk() (*string, bool) {
	if o == nil || o.Symbol == nil {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *RecommendationTrend) HasSymbol() bool {
	if o != nil && o.Symbol != nil {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *RecommendationTrend) SetSymbol(v string) {
	o.Symbol = &v
}

// GetBuy returns the Buy field value if set, zero value otherwise.
func (o *RecommendationTrend) GetBuy() int64 {
	if o == nil || o.Buy == nil {
		var ret int64
		return ret
	}
	return *o.Buy
}

// GetBuyOk returns a tuple with the Buy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendationTrend) GetBuyOk() (*int64, bool) {
	if o == nil || o.Buy == nil {
		return nil, false
	}
	return o.Buy, true
}

// HasBuy returns a boolean if a field has been set.
func (o *RecommendationTrend) HasBuy() bool {
	if o != nil && o.Buy != nil {
		return true
	}

	return false
}

// SetBuy gets a reference to the given int64 and assigns it to the Buy field.
func (o *RecommendationTrend) SetBuy(v int64) {
	o.Buy = &v
}

// GetHold returns the Hold field value if set, zero value otherwise.
func (o *RecommendationTrend) GetHold() int64 {
	if o == nil || o.Hold == nil {
		var ret int64
		return ret
	}
	return *o.Hold
}

// GetHoldOk returns a tuple with the Hold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendationTrend) GetHoldOk() (*int64, bool) {
	if o == nil || o.Hold == nil {
		return nil, false
	}
	return o.Hold, true
}

// HasHold returns a boolean if a field has been set.
func (o *RecommendationTrend) HasHold() bool {
	if o != nil && o.Hold != nil {
		return true
	}

	return false
}

// SetHold gets a reference to the given int64 and assigns it to the Hold field.
func (o *RecommendationTrend) SetHold(v int64) {
	o.Hold = &v
}

// GetPeriod returns the Period field value if set, zero value otherwise.
func (o *RecommendationTrend) GetPeriod() string {
	if o == nil || o.Period == nil {
		var ret string
		return ret
	}
	return *o.Period
}

// GetPeriodOk returns a tuple with the Period field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendationTrend) GetPeriodOk() (*string, bool) {
	if o == nil || o.Period == nil {
		return nil, false
	}
	return o.Period, true
}

// HasPeriod returns a boolean if a field has been set.
func (o *RecommendationTrend) HasPeriod() bool {
	if o != nil && o.Period != nil {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given string and assigns it to the Period field.
func (o *RecommendationTrend) SetPeriod(v string) {
	o.Period = &v
}

// GetSell returns the Sell field value if set, zero value otherwise.
func (o *RecommendationTrend) GetSell() int64 {
	if o == nil || o.Sell == nil {
		var ret int64
		return ret
	}
	return *o.Sell
}

// GetSellOk returns a tuple with the Sell field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendationTrend) GetSellOk() (*int64, bool) {
	if o == nil || o.Sell == nil {
		return nil, false
	}
	return o.Sell, true
}

// HasSell returns a boolean if a field has been set.
func (o *RecommendationTrend) HasSell() bool {
	if o != nil && o.Sell != nil {
		return true
	}

	return false
}

// SetSell gets a reference to the given int64 and assigns it to the Sell field.
func (o *RecommendationTrend) SetSell(v int64) {
	o.Sell = &v
}

// GetStrongBuy returns the StrongBuy field value if set, zero value otherwise.
func (o *RecommendationTrend) GetStrongBuy() int64 {
	if o == nil || o.StrongBuy == nil {
		var ret int64
		return ret
	}
	return *o.StrongBuy
}

// GetStrongBuyOk returns a tuple with the StrongBuy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendationTrend) GetStrongBuyOk() (*int64, bool) {
	if o == nil || o.StrongBuy == nil {
		return nil, false
	}
	return o.StrongBuy, true
}

// HasStrongBuy returns a boolean if a field has been set.
func (o *RecommendationTrend) HasStrongBuy() bool {
	if o != nil && o.StrongBuy != nil {
		return true
	}

	return false
}

// SetStrongBuy gets a reference to the given int64 and assigns it to the StrongBuy field.
func (o *RecommendationTrend) SetStrongBuy(v int64) {
	o.StrongBuy = &v
}

// GetStrongSell returns the StrongSell field value if set, zero value otherwise.
func (o *RecommendationTrend) GetStrongSell() int64 {
	if o == nil || o.StrongSell == nil {
		var ret int64
		return ret
	}
	return *o.StrongSell
}

// GetStrongSellOk returns a tuple with the StrongSell field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendationTrend) GetStrongSellOk() (*int64, bool) {
	if o == nil || o.StrongSell == nil {
		return nil, false
	}
	return o.StrongSell, true
}

// HasStrongSell returns a boolean if a field has been set.
func (o *RecommendationTrend) HasStrongSell() bool {
	if o != nil && o.StrongSell != nil {
		return true
	}

	return false
}

// SetStrongSell gets a reference to the given int64 and assigns it to the StrongSell field.
func (o *RecommendationTrend) SetStrongSell(v int64) {
	o.StrongSell = &v
}

func (o RecommendationTrend) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Symbol != nil {
		toSerialize["symbol"] = o.Symbol
	}
	if o.Buy != nil {
		toSerialize["buy"] = o.Buy
	}
	if o.Hold != nil {
		toSerialize["hold"] = o.Hold
	}
	if o.Period != nil {
		toSerialize["period"] = o.Period
	}
	if o.Sell != nil {
		toSerialize["sell"] = o.Sell
	}
	if o.StrongBuy != nil {
		toSerialize["strongBuy"] = o.StrongBuy
	}
	if o.StrongSell != nil {
		toSerialize["strongSell"] = o.StrongSell
	}
	return json.Marshal(toSerialize)
}

type NullableRecommendationTrend struct {
	value *RecommendationTrend
	isSet bool
}

func (v NullableRecommendationTrend) Get() *RecommendationTrend {
	return v.value
}

func (v *NullableRecommendationTrend) Set(val *RecommendationTrend) {
	v.value = val
	v.isSet = true
}

func (v NullableRecommendationTrend) IsSet() bool {
	return v.isSet
}

func (v *NullableRecommendationTrend) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecommendationTrend(val *RecommendationTrend) *NullableRecommendationTrend {
	return &NullableRecommendationTrend{value: val, isSet: true}
}

func (v NullableRecommendationTrend) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecommendationTrend) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


