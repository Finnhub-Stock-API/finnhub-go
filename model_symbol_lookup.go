/*
Finnhub API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finnhub

import (
	"encoding/json"
)

// SymbolLookup struct for SymbolLookup
type SymbolLookup struct {
	// Array of search results.
	Result *[]SymbolLookupInfo `json:"result,omitempty"`
	// Number of results.
	Count *int64 `json:"count,omitempty"`
}

// NewSymbolLookup instantiates a new SymbolLookup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSymbolLookup() *SymbolLookup {
	this := SymbolLookup{}
	return &this
}

// NewSymbolLookupWithDefaults instantiates a new SymbolLookup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSymbolLookupWithDefaults() *SymbolLookup {
	this := SymbolLookup{}
	return &this
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *SymbolLookup) GetResult() []SymbolLookupInfo {
	if o == nil || o.Result == nil {
		var ret []SymbolLookupInfo
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SymbolLookup) GetResultOk() (*[]SymbolLookupInfo, bool) {
	if o == nil || o.Result == nil {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *SymbolLookup) HasResult() bool {
	if o != nil && o.Result != nil {
		return true
	}

	return false
}

// SetResult gets a reference to the given []SymbolLookupInfo and assigns it to the Result field.
func (o *SymbolLookup) SetResult(v []SymbolLookupInfo) {
	o.Result = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *SymbolLookup) GetCount() int64 {
	if o == nil || o.Count == nil {
		var ret int64
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SymbolLookup) GetCountOk() (*int64, bool) {
	if o == nil || o.Count == nil {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *SymbolLookup) HasCount() bool {
	if o != nil && o.Count != nil {
		return true
	}

	return false
}

// SetCount gets a reference to the given int64 and assigns it to the Count field.
func (o *SymbolLookup) SetCount(v int64) {
	o.Count = &v
}

func (o SymbolLookup) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Result != nil {
		toSerialize["result"] = o.Result
	}
	if o.Count != nil {
		toSerialize["count"] = o.Count
	}
	return json.Marshal(toSerialize)
}

type NullableSymbolLookup struct {
	value *SymbolLookup
	isSet bool
}

func (v NullableSymbolLookup) Get() *SymbolLookup {
	return v.value
}

func (v *NullableSymbolLookup) Set(val *SymbolLookup) {
	v.value = val
	v.isSet = true
}

func (v NullableSymbolLookup) IsSet() bool {
	return v.isSet
}

func (v *NullableSymbolLookup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSymbolLookup(val *SymbolLookup) *NullableSymbolLookup {
	return &NullableSymbolLookup{value: val, isSet: true}
}

func (v NullableSymbolLookup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSymbolLookup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


