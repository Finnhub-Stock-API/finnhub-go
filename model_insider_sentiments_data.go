/*
Finnhub API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finnhub

import (
	"encoding/json"
)

// InsiderSentimentsData struct for InsiderSentimentsData
type InsiderSentimentsData struct {
	// Symbol.
	Symbol *string `json:"symbol,omitempty"`
	// Year.
	Year *int64 `json:"year,omitempty"`
	// Month.
	Month *int64 `json:"month,omitempty"`
	// Net buying/selling from all insiders' transactions.
	Change *int64 `json:"change,omitempty"`
	// Monthly share purchase ratio.
	Mspr *float32 `json:"mspr,omitempty"`
}

// NewInsiderSentimentsData instantiates a new InsiderSentimentsData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInsiderSentimentsData() *InsiderSentimentsData {
	this := InsiderSentimentsData{}
	return &this
}

// NewInsiderSentimentsDataWithDefaults instantiates a new InsiderSentimentsData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInsiderSentimentsDataWithDefaults() *InsiderSentimentsData {
	this := InsiderSentimentsData{}
	return &this
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *InsiderSentimentsData) GetSymbol() string {
	if o == nil || o.Symbol == nil {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InsiderSentimentsData) GetSymbolOk() (*string, bool) {
	if o == nil || o.Symbol == nil {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *InsiderSentimentsData) HasSymbol() bool {
	if o != nil && o.Symbol != nil {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *InsiderSentimentsData) SetSymbol(v string) {
	o.Symbol = &v
}

// GetYear returns the Year field value if set, zero value otherwise.
func (o *InsiderSentimentsData) GetYear() int64 {
	if o == nil || o.Year == nil {
		var ret int64
		return ret
	}
	return *o.Year
}

// GetYearOk returns a tuple with the Year field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InsiderSentimentsData) GetYearOk() (*int64, bool) {
	if o == nil || o.Year == nil {
		return nil, false
	}
	return o.Year, true
}

// HasYear returns a boolean if a field has been set.
func (o *InsiderSentimentsData) HasYear() bool {
	if o != nil && o.Year != nil {
		return true
	}

	return false
}

// SetYear gets a reference to the given int64 and assigns it to the Year field.
func (o *InsiderSentimentsData) SetYear(v int64) {
	o.Year = &v
}

// GetMonth returns the Month field value if set, zero value otherwise.
func (o *InsiderSentimentsData) GetMonth() int64 {
	if o == nil || o.Month == nil {
		var ret int64
		return ret
	}
	return *o.Month
}

// GetMonthOk returns a tuple with the Month field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InsiderSentimentsData) GetMonthOk() (*int64, bool) {
	if o == nil || o.Month == nil {
		return nil, false
	}
	return o.Month, true
}

// HasMonth returns a boolean if a field has been set.
func (o *InsiderSentimentsData) HasMonth() bool {
	if o != nil && o.Month != nil {
		return true
	}

	return false
}

// SetMonth gets a reference to the given int64 and assigns it to the Month field.
func (o *InsiderSentimentsData) SetMonth(v int64) {
	o.Month = &v
}

// GetChange returns the Change field value if set, zero value otherwise.
func (o *InsiderSentimentsData) GetChange() int64 {
	if o == nil || o.Change == nil {
		var ret int64
		return ret
	}
	return *o.Change
}

// GetChangeOk returns a tuple with the Change field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InsiderSentimentsData) GetChangeOk() (*int64, bool) {
	if o == nil || o.Change == nil {
		return nil, false
	}
	return o.Change, true
}

// HasChange returns a boolean if a field has been set.
func (o *InsiderSentimentsData) HasChange() bool {
	if o != nil && o.Change != nil {
		return true
	}

	return false
}

// SetChange gets a reference to the given int64 and assigns it to the Change field.
func (o *InsiderSentimentsData) SetChange(v int64) {
	o.Change = &v
}

// GetMspr returns the Mspr field value if set, zero value otherwise.
func (o *InsiderSentimentsData) GetMspr() float32 {
	if o == nil || o.Mspr == nil {
		var ret float32
		return ret
	}
	return *o.Mspr
}

// GetMsprOk returns a tuple with the Mspr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InsiderSentimentsData) GetMsprOk() (*float32, bool) {
	if o == nil || o.Mspr == nil {
		return nil, false
	}
	return o.Mspr, true
}

// HasMspr returns a boolean if a field has been set.
func (o *InsiderSentimentsData) HasMspr() bool {
	if o != nil && o.Mspr != nil {
		return true
	}

	return false
}

// SetMspr gets a reference to the given float32 and assigns it to the Mspr field.
func (o *InsiderSentimentsData) SetMspr(v float32) {
	o.Mspr = &v
}

func (o InsiderSentimentsData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Symbol != nil {
		toSerialize["symbol"] = o.Symbol
	}
	if o.Year != nil {
		toSerialize["year"] = o.Year
	}
	if o.Month != nil {
		toSerialize["month"] = o.Month
	}
	if o.Change != nil {
		toSerialize["change"] = o.Change
	}
	if o.Mspr != nil {
		toSerialize["mspr"] = o.Mspr
	}
	return json.Marshal(toSerialize)
}

type NullableInsiderSentimentsData struct {
	value *InsiderSentimentsData
	isSet bool
}

func (v NullableInsiderSentimentsData) Get() *InsiderSentimentsData {
	return v.value
}

func (v *NullableInsiderSentimentsData) Set(val *InsiderSentimentsData) {
	v.value = val
	v.isSet = true
}

func (v NullableInsiderSentimentsData) IsSet() bool {
	return v.isSet
}

func (v *NullableInsiderSentimentsData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInsiderSentimentsData(val *InsiderSentimentsData) *NullableInsiderSentimentsData {
	return &NullableInsiderSentimentsData{value: val, isSet: true}
}

func (v NullableInsiderSentimentsData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInsiderSentimentsData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


