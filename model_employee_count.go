/*
Finnhub API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finnhub

import (
	"encoding/json"
)

// EmployeeCount struct for EmployeeCount
type EmployeeCount struct {
	// Date of the reading
	AtDate *string `json:"atDate,omitempty"`
	// Value
	Employee *float32 `json:"employee,omitempty"`
}

// NewEmployeeCount instantiates a new EmployeeCount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmployeeCount() *EmployeeCount {
	this := EmployeeCount{}
	return &this
}

// NewEmployeeCountWithDefaults instantiates a new EmployeeCount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmployeeCountWithDefaults() *EmployeeCount {
	this := EmployeeCount{}
	return &this
}

// GetAtDate returns the AtDate field value if set, zero value otherwise.
func (o *EmployeeCount) GetAtDate() string {
	if o == nil || o.AtDate == nil {
		var ret string
		return ret
	}
	return *o.AtDate
}

// GetAtDateOk returns a tuple with the AtDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmployeeCount) GetAtDateOk() (*string, bool) {
	if o == nil || o.AtDate == nil {
		return nil, false
	}
	return o.AtDate, true
}

// HasAtDate returns a boolean if a field has been set.
func (o *EmployeeCount) HasAtDate() bool {
	if o != nil && o.AtDate != nil {
		return true
	}

	return false
}

// SetAtDate gets a reference to the given string and assigns it to the AtDate field.
func (o *EmployeeCount) SetAtDate(v string) {
	o.AtDate = &v
}

// GetEmployee returns the Employee field value if set, zero value otherwise.
func (o *EmployeeCount) GetEmployee() float32 {
	if o == nil || o.Employee == nil {
		var ret float32
		return ret
	}
	return *o.Employee
}

// GetEmployeeOk returns a tuple with the Employee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmployeeCount) GetEmployeeOk() (*float32, bool) {
	if o == nil || o.Employee == nil {
		return nil, false
	}
	return o.Employee, true
}

// HasEmployee returns a boolean if a field has been set.
func (o *EmployeeCount) HasEmployee() bool {
	if o != nil && o.Employee != nil {
		return true
	}

	return false
}

// SetEmployee gets a reference to the given float32 and assigns it to the Employee field.
func (o *EmployeeCount) SetEmployee(v float32) {
	o.Employee = &v
}

func (o EmployeeCount) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AtDate != nil {
		toSerialize["atDate"] = o.AtDate
	}
	if o.Employee != nil {
		toSerialize["employee"] = o.Employee
	}
	return json.Marshal(toSerialize)
}

type NullableEmployeeCount struct {
	value *EmployeeCount
	isSet bool
}

func (v NullableEmployeeCount) Get() *EmployeeCount {
	return v.value
}

func (v *NullableEmployeeCount) Set(val *EmployeeCount) {
	v.value = val
	v.isSet = true
}

func (v NullableEmployeeCount) IsSet() bool {
	return v.isSet
}

func (v *NullableEmployeeCount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmployeeCount(val *EmployeeCount) *NullableEmployeeCount {
	return &NullableEmployeeCount{value: val, isSet: true}
}

func (v NullableEmployeeCount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmployeeCount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


