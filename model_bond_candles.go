/*
Finnhub API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finnhub

import (
	"encoding/json"
)

// BondCandles struct for BondCandles
type BondCandles struct {
	// List of close prices for returned candles.
	C *[]float32 `json:"c,omitempty"`
	// List of timestamp for returned candles.
	T *[]int64 `json:"t,omitempty"`
	// Status of the response. This field can either be ok or no_data.
	S *string `json:"s,omitempty"`
}

// NewBondCandles instantiates a new BondCandles object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBondCandles() *BondCandles {
	this := BondCandles{}
	return &this
}

// NewBondCandlesWithDefaults instantiates a new BondCandles object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBondCandlesWithDefaults() *BondCandles {
	this := BondCandles{}
	return &this
}

// GetC returns the C field value if set, zero value otherwise.
func (o *BondCandles) GetC() []float32 {
	if o == nil || o.C == nil {
		var ret []float32
		return ret
	}
	return *o.C
}

// GetCOk returns a tuple with the C field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondCandles) GetCOk() (*[]float32, bool) {
	if o == nil || o.C == nil {
		return nil, false
	}
	return o.C, true
}

// HasC returns a boolean if a field has been set.
func (o *BondCandles) HasC() bool {
	if o != nil && o.C != nil {
		return true
	}

	return false
}

// SetC gets a reference to the given []float32 and assigns it to the C field.
func (o *BondCandles) SetC(v []float32) {
	o.C = &v
}

// GetT returns the T field value if set, zero value otherwise.
func (o *BondCandles) GetT() []int64 {
	if o == nil || o.T == nil {
		var ret []int64
		return ret
	}
	return *o.T
}

// GetTOk returns a tuple with the T field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondCandles) GetTOk() (*[]int64, bool) {
	if o == nil || o.T == nil {
		return nil, false
	}
	return o.T, true
}

// HasT returns a boolean if a field has been set.
func (o *BondCandles) HasT() bool {
	if o != nil && o.T != nil {
		return true
	}

	return false
}

// SetT gets a reference to the given []int64 and assigns it to the T field.
func (o *BondCandles) SetT(v []int64) {
	o.T = &v
}

// GetS returns the S field value if set, zero value otherwise.
func (o *BondCandles) GetS() string {
	if o == nil || o.S == nil {
		var ret string
		return ret
	}
	return *o.S
}

// GetSOk returns a tuple with the S field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondCandles) GetSOk() (*string, bool) {
	if o == nil || o.S == nil {
		return nil, false
	}
	return o.S, true
}

// HasS returns a boolean if a field has been set.
func (o *BondCandles) HasS() bool {
	if o != nil && o.S != nil {
		return true
	}

	return false
}

// SetS gets a reference to the given string and assigns it to the S field.
func (o *BondCandles) SetS(v string) {
	o.S = &v
}

func (o BondCandles) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.C != nil {
		toSerialize["c"] = o.C
	}
	if o.T != nil {
		toSerialize["t"] = o.T
	}
	if o.S != nil {
		toSerialize["s"] = o.S
	}
	return json.Marshal(toSerialize)
}

type NullableBondCandles struct {
	value *BondCandles
	isSet bool
}

func (v NullableBondCandles) Get() *BondCandles {
	return v.value
}

func (v *NullableBondCandles) Set(val *BondCandles) {
	v.value = val
	v.isSet = true
}

func (v NullableBondCandles) IsSet() bool {
	return v.isSet
}

func (v *NullableBondCandles) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBondCandles(val *BondCandles) *NullableBondCandles {
	return &NullableBondCandles{value: val, isSet: true}
}

func (v NullableBondCandles) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBondCandles) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


