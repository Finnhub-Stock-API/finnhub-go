/*
Finnhub API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finnhub

import (
	"encoding/json"
)

// Filing struct for Filing
type Filing struct {
	// Access number.
	AccessNumber *string `json:"accessNumber,omitempty"`
	// Symbol.
	Symbol *string `json:"symbol,omitempty"`
	// CIK.
	Cik *string `json:"cik,omitempty"`
	// Form type.
	Form *string `json:"form,omitempty"`
	// Filed date <code>%Y-%m-%d %H:%M:%S</code>.
	FiledDate *string `json:"filedDate,omitempty"`
	// Accepted date <code>%Y-%m-%d %H:%M:%S</code>.
	AcceptedDate *string `json:"acceptedDate,omitempty"`
	// Report's URL.
	ReportUrl *string `json:"reportUrl,omitempty"`
	// Filing's URL.
	FilingUrl *string `json:"filingUrl,omitempty"`
}

// NewFiling instantiates a new Filing object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFiling() *Filing {
	this := Filing{}
	return &this
}

// NewFilingWithDefaults instantiates a new Filing object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilingWithDefaults() *Filing {
	this := Filing{}
	return &this
}

// GetAccessNumber returns the AccessNumber field value if set, zero value otherwise.
func (o *Filing) GetAccessNumber() string {
	if o == nil || o.AccessNumber == nil {
		var ret string
		return ret
	}
	return *o.AccessNumber
}

// GetAccessNumberOk returns a tuple with the AccessNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filing) GetAccessNumberOk() (*string, bool) {
	if o == nil || o.AccessNumber == nil {
		return nil, false
	}
	return o.AccessNumber, true
}

// HasAccessNumber returns a boolean if a field has been set.
func (o *Filing) HasAccessNumber() bool {
	if o != nil && o.AccessNumber != nil {
		return true
	}

	return false
}

// SetAccessNumber gets a reference to the given string and assigns it to the AccessNumber field.
func (o *Filing) SetAccessNumber(v string) {
	o.AccessNumber = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *Filing) GetSymbol() string {
	if o == nil || o.Symbol == nil {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filing) GetSymbolOk() (*string, bool) {
	if o == nil || o.Symbol == nil {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *Filing) HasSymbol() bool {
	if o != nil && o.Symbol != nil {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *Filing) SetSymbol(v string) {
	o.Symbol = &v
}

// GetCik returns the Cik field value if set, zero value otherwise.
func (o *Filing) GetCik() string {
	if o == nil || o.Cik == nil {
		var ret string
		return ret
	}
	return *o.Cik
}

// GetCikOk returns a tuple with the Cik field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filing) GetCikOk() (*string, bool) {
	if o == nil || o.Cik == nil {
		return nil, false
	}
	return o.Cik, true
}

// HasCik returns a boolean if a field has been set.
func (o *Filing) HasCik() bool {
	if o != nil && o.Cik != nil {
		return true
	}

	return false
}

// SetCik gets a reference to the given string and assigns it to the Cik field.
func (o *Filing) SetCik(v string) {
	o.Cik = &v
}

// GetForm returns the Form field value if set, zero value otherwise.
func (o *Filing) GetForm() string {
	if o == nil || o.Form == nil {
		var ret string
		return ret
	}
	return *o.Form
}

// GetFormOk returns a tuple with the Form field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filing) GetFormOk() (*string, bool) {
	if o == nil || o.Form == nil {
		return nil, false
	}
	return o.Form, true
}

// HasForm returns a boolean if a field has been set.
func (o *Filing) HasForm() bool {
	if o != nil && o.Form != nil {
		return true
	}

	return false
}

// SetForm gets a reference to the given string and assigns it to the Form field.
func (o *Filing) SetForm(v string) {
	o.Form = &v
}

// GetFiledDate returns the FiledDate field value if set, zero value otherwise.
func (o *Filing) GetFiledDate() string {
	if o == nil || o.FiledDate == nil {
		var ret string
		return ret
	}
	return *o.FiledDate
}

// GetFiledDateOk returns a tuple with the FiledDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filing) GetFiledDateOk() (*string, bool) {
	if o == nil || o.FiledDate == nil {
		return nil, false
	}
	return o.FiledDate, true
}

// HasFiledDate returns a boolean if a field has been set.
func (o *Filing) HasFiledDate() bool {
	if o != nil && o.FiledDate != nil {
		return true
	}

	return false
}

// SetFiledDate gets a reference to the given string and assigns it to the FiledDate field.
func (o *Filing) SetFiledDate(v string) {
	o.FiledDate = &v
}

// GetAcceptedDate returns the AcceptedDate field value if set, zero value otherwise.
func (o *Filing) GetAcceptedDate() string {
	if o == nil || o.AcceptedDate == nil {
		var ret string
		return ret
	}
	return *o.AcceptedDate
}

// GetAcceptedDateOk returns a tuple with the AcceptedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filing) GetAcceptedDateOk() (*string, bool) {
	if o == nil || o.AcceptedDate == nil {
		return nil, false
	}
	return o.AcceptedDate, true
}

// HasAcceptedDate returns a boolean if a field has been set.
func (o *Filing) HasAcceptedDate() bool {
	if o != nil && o.AcceptedDate != nil {
		return true
	}

	return false
}

// SetAcceptedDate gets a reference to the given string and assigns it to the AcceptedDate field.
func (o *Filing) SetAcceptedDate(v string) {
	o.AcceptedDate = &v
}

// GetReportUrl returns the ReportUrl field value if set, zero value otherwise.
func (o *Filing) GetReportUrl() string {
	if o == nil || o.ReportUrl == nil {
		var ret string
		return ret
	}
	return *o.ReportUrl
}

// GetReportUrlOk returns a tuple with the ReportUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filing) GetReportUrlOk() (*string, bool) {
	if o == nil || o.ReportUrl == nil {
		return nil, false
	}
	return o.ReportUrl, true
}

// HasReportUrl returns a boolean if a field has been set.
func (o *Filing) HasReportUrl() bool {
	if o != nil && o.ReportUrl != nil {
		return true
	}

	return false
}

// SetReportUrl gets a reference to the given string and assigns it to the ReportUrl field.
func (o *Filing) SetReportUrl(v string) {
	o.ReportUrl = &v
}

// GetFilingUrl returns the FilingUrl field value if set, zero value otherwise.
func (o *Filing) GetFilingUrl() string {
	if o == nil || o.FilingUrl == nil {
		var ret string
		return ret
	}
	return *o.FilingUrl
}

// GetFilingUrlOk returns a tuple with the FilingUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filing) GetFilingUrlOk() (*string, bool) {
	if o == nil || o.FilingUrl == nil {
		return nil, false
	}
	return o.FilingUrl, true
}

// HasFilingUrl returns a boolean if a field has been set.
func (o *Filing) HasFilingUrl() bool {
	if o != nil && o.FilingUrl != nil {
		return true
	}

	return false
}

// SetFilingUrl gets a reference to the given string and assigns it to the FilingUrl field.
func (o *Filing) SetFilingUrl(v string) {
	o.FilingUrl = &v
}

func (o Filing) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccessNumber != nil {
		toSerialize["accessNumber"] = o.AccessNumber
	}
	if o.Symbol != nil {
		toSerialize["symbol"] = o.Symbol
	}
	if o.Cik != nil {
		toSerialize["cik"] = o.Cik
	}
	if o.Form != nil {
		toSerialize["form"] = o.Form
	}
	if o.FiledDate != nil {
		toSerialize["filedDate"] = o.FiledDate
	}
	if o.AcceptedDate != nil {
		toSerialize["acceptedDate"] = o.AcceptedDate
	}
	if o.ReportUrl != nil {
		toSerialize["reportUrl"] = o.ReportUrl
	}
	if o.FilingUrl != nil {
		toSerialize["filingUrl"] = o.FilingUrl
	}
	return json.Marshal(toSerialize)
}

type NullableFiling struct {
	value *Filing
	isSet bool
}

func (v NullableFiling) Get() *Filing {
	return v.value
}

func (v *NullableFiling) Set(val *Filing) {
	v.value = val
	v.isSet = true
}

func (v NullableFiling) IsSet() bool {
	return v.isSet
}

func (v *NullableFiling) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFiling(val *Filing) *NullableFiling {
	return &NullableFiling{value: val, isSet: true}
}

func (v NullableFiling) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFiling) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


