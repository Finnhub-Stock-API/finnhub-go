/*
Finnhub API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finnhub

import (
	"encoding/json"
)

// SectorMetric struct for SectorMetric
type SectorMetric struct {
	// Region.
	Region *string `json:"region,omitempty"`
	// Metrics for each sector.
	Data *[]SectorMetricData `json:"data,omitempty"`
}

// NewSectorMetric instantiates a new SectorMetric object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSectorMetric() *SectorMetric {
	this := SectorMetric{}
	return &this
}

// NewSectorMetricWithDefaults instantiates a new SectorMetric object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSectorMetricWithDefaults() *SectorMetric {
	this := SectorMetric{}
	return &this
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *SectorMetric) GetRegion() string {
	if o == nil || o.Region == nil {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SectorMetric) GetRegionOk() (*string, bool) {
	if o == nil || o.Region == nil {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *SectorMetric) HasRegion() bool {
	if o != nil && o.Region != nil {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *SectorMetric) SetRegion(v string) {
	o.Region = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *SectorMetric) GetData() []SectorMetricData {
	if o == nil || o.Data == nil {
		var ret []SectorMetricData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SectorMetric) GetDataOk() (*[]SectorMetricData, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *SectorMetric) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given []SectorMetricData and assigns it to the Data field.
func (o *SectorMetric) SetData(v []SectorMetricData) {
	o.Data = &v
}

func (o SectorMetric) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Region != nil {
		toSerialize["region"] = o.Region
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableSectorMetric struct {
	value *SectorMetric
	isSet bool
}

func (v NullableSectorMetric) Get() *SectorMetric {
	return v.value
}

func (v *NullableSectorMetric) Set(val *SectorMetric) {
	v.value = val
	v.isSet = true
}

func (v NullableSectorMetric) IsSet() bool {
	return v.isSet
}

func (v *NullableSectorMetric) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSectorMetric(val *SectorMetric) *NullableSectorMetric {
	return &NullableSectorMetric{value: val, isSet: true}
}

func (v NullableSectorMetric) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSectorMetric) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


