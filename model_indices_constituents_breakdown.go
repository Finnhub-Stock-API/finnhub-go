/*
Finnhub API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finnhub

import (
	"encoding/json"
)

// IndicesConstituentsBreakdown struct for IndicesConstituentsBreakdown
type IndicesConstituentsBreakdown struct {
	// Symbol.
	Symbol *string `json:"symbol,omitempty"`
	// Name.
	Name *string `json:"name,omitempty"`
	// ISIN.
	Isin *string `json:"isin,omitempty"`
	// Cusip.
	Cusip *string `json:"cusip,omitempty"`
	// Global Share Class FIGI.
	ShareClassFIGI *string `json:"shareClassFIGI,omitempty"`
	// Weight.
	Weight *float32 `json:"weight,omitempty"`
}

// NewIndicesConstituentsBreakdown instantiates a new IndicesConstituentsBreakdown object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIndicesConstituentsBreakdown() *IndicesConstituentsBreakdown {
	this := IndicesConstituentsBreakdown{}
	return &this
}

// NewIndicesConstituentsBreakdownWithDefaults instantiates a new IndicesConstituentsBreakdown object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIndicesConstituentsBreakdownWithDefaults() *IndicesConstituentsBreakdown {
	this := IndicesConstituentsBreakdown{}
	return &this
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *IndicesConstituentsBreakdown) GetSymbol() string {
	if o == nil || o.Symbol == nil {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicesConstituentsBreakdown) GetSymbolOk() (*string, bool) {
	if o == nil || o.Symbol == nil {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *IndicesConstituentsBreakdown) HasSymbol() bool {
	if o != nil && o.Symbol != nil {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *IndicesConstituentsBreakdown) SetSymbol(v string) {
	o.Symbol = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IndicesConstituentsBreakdown) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicesConstituentsBreakdown) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IndicesConstituentsBreakdown) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IndicesConstituentsBreakdown) SetName(v string) {
	o.Name = &v
}

// GetIsin returns the Isin field value if set, zero value otherwise.
func (o *IndicesConstituentsBreakdown) GetIsin() string {
	if o == nil || o.Isin == nil {
		var ret string
		return ret
	}
	return *o.Isin
}

// GetIsinOk returns a tuple with the Isin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicesConstituentsBreakdown) GetIsinOk() (*string, bool) {
	if o == nil || o.Isin == nil {
		return nil, false
	}
	return o.Isin, true
}

// HasIsin returns a boolean if a field has been set.
func (o *IndicesConstituentsBreakdown) HasIsin() bool {
	if o != nil && o.Isin != nil {
		return true
	}

	return false
}

// SetIsin gets a reference to the given string and assigns it to the Isin field.
func (o *IndicesConstituentsBreakdown) SetIsin(v string) {
	o.Isin = &v
}

// GetCusip returns the Cusip field value if set, zero value otherwise.
func (o *IndicesConstituentsBreakdown) GetCusip() string {
	if o == nil || o.Cusip == nil {
		var ret string
		return ret
	}
	return *o.Cusip
}

// GetCusipOk returns a tuple with the Cusip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicesConstituentsBreakdown) GetCusipOk() (*string, bool) {
	if o == nil || o.Cusip == nil {
		return nil, false
	}
	return o.Cusip, true
}

// HasCusip returns a boolean if a field has been set.
func (o *IndicesConstituentsBreakdown) HasCusip() bool {
	if o != nil && o.Cusip != nil {
		return true
	}

	return false
}

// SetCusip gets a reference to the given string and assigns it to the Cusip field.
func (o *IndicesConstituentsBreakdown) SetCusip(v string) {
	o.Cusip = &v
}

// GetShareClassFIGI returns the ShareClassFIGI field value if set, zero value otherwise.
func (o *IndicesConstituentsBreakdown) GetShareClassFIGI() string {
	if o == nil || o.ShareClassFIGI == nil {
		var ret string
		return ret
	}
	return *o.ShareClassFIGI
}

// GetShareClassFIGIOk returns a tuple with the ShareClassFIGI field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicesConstituentsBreakdown) GetShareClassFIGIOk() (*string, bool) {
	if o == nil || o.ShareClassFIGI == nil {
		return nil, false
	}
	return o.ShareClassFIGI, true
}

// HasShareClassFIGI returns a boolean if a field has been set.
func (o *IndicesConstituentsBreakdown) HasShareClassFIGI() bool {
	if o != nil && o.ShareClassFIGI != nil {
		return true
	}

	return false
}

// SetShareClassFIGI gets a reference to the given string and assigns it to the ShareClassFIGI field.
func (o *IndicesConstituentsBreakdown) SetShareClassFIGI(v string) {
	o.ShareClassFIGI = &v
}

// GetWeight returns the Weight field value if set, zero value otherwise.
func (o *IndicesConstituentsBreakdown) GetWeight() float32 {
	if o == nil || o.Weight == nil {
		var ret float32
		return ret
	}
	return *o.Weight
}

// GetWeightOk returns a tuple with the Weight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicesConstituentsBreakdown) GetWeightOk() (*float32, bool) {
	if o == nil || o.Weight == nil {
		return nil, false
	}
	return o.Weight, true
}

// HasWeight returns a boolean if a field has been set.
func (o *IndicesConstituentsBreakdown) HasWeight() bool {
	if o != nil && o.Weight != nil {
		return true
	}

	return false
}

// SetWeight gets a reference to the given float32 and assigns it to the Weight field.
func (o *IndicesConstituentsBreakdown) SetWeight(v float32) {
	o.Weight = &v
}

func (o IndicesConstituentsBreakdown) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Symbol != nil {
		toSerialize["symbol"] = o.Symbol
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Isin != nil {
		toSerialize["isin"] = o.Isin
	}
	if o.Cusip != nil {
		toSerialize["cusip"] = o.Cusip
	}
	if o.ShareClassFIGI != nil {
		toSerialize["shareClassFIGI"] = o.ShareClassFIGI
	}
	if o.Weight != nil {
		toSerialize["weight"] = o.Weight
	}
	return json.Marshal(toSerialize)
}

type NullableIndicesConstituentsBreakdown struct {
	value *IndicesConstituentsBreakdown
	isSet bool
}

func (v NullableIndicesConstituentsBreakdown) Get() *IndicesConstituentsBreakdown {
	return v.value
}

func (v *NullableIndicesConstituentsBreakdown) Set(val *IndicesConstituentsBreakdown) {
	v.value = val
	v.isSet = true
}

func (v NullableIndicesConstituentsBreakdown) IsSet() bool {
	return v.isSet
}

func (v *NullableIndicesConstituentsBreakdown) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndicesConstituentsBreakdown(val *IndicesConstituentsBreakdown) *NullableIndicesConstituentsBreakdown {
	return &NullableIndicesConstituentsBreakdown{value: val, isSet: true}
}

func (v NullableIndicesConstituentsBreakdown) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndicesConstituentsBreakdown) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


