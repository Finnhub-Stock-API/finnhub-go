/*
Finnhub API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finnhub

import (
	"encoding/json"
)

// InternationalFiling struct for InternationalFiling
type InternationalFiling struct {
	// Symbol.
	Symbol *string `json:"symbol,omitempty"`
	// Company name.
	CompanyName *string `json:"companyName,omitempty"`
	// Filed date <code>%Y-%m-%d %H:%M:%S</code>.
	FiledDate *string `json:"filedDate,omitempty"`
	// Category.
	Category *string `json:"category,omitempty"`
	// Document's title.
	Title *string `json:"title,omitempty"`
	// Document's description.
	Description *string `json:"description,omitempty"`
	// Url.
	Url *string `json:"url,omitempty"`
	// Language.
	Language *string `json:"language,omitempty"`
	// Country.
	Country *string `json:"country,omitempty"`
}

// NewInternationalFiling instantiates a new InternationalFiling object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInternationalFiling() *InternationalFiling {
	this := InternationalFiling{}
	return &this
}

// NewInternationalFilingWithDefaults instantiates a new InternationalFiling object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInternationalFilingWithDefaults() *InternationalFiling {
	this := InternationalFiling{}
	return &this
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *InternationalFiling) GetSymbol() string {
	if o == nil || o.Symbol == nil {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternationalFiling) GetSymbolOk() (*string, bool) {
	if o == nil || o.Symbol == nil {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *InternationalFiling) HasSymbol() bool {
	if o != nil && o.Symbol != nil {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *InternationalFiling) SetSymbol(v string) {
	o.Symbol = &v
}

// GetCompanyName returns the CompanyName field value if set, zero value otherwise.
func (o *InternationalFiling) GetCompanyName() string {
	if o == nil || o.CompanyName == nil {
		var ret string
		return ret
	}
	return *o.CompanyName
}

// GetCompanyNameOk returns a tuple with the CompanyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternationalFiling) GetCompanyNameOk() (*string, bool) {
	if o == nil || o.CompanyName == nil {
		return nil, false
	}
	return o.CompanyName, true
}

// HasCompanyName returns a boolean if a field has been set.
func (o *InternationalFiling) HasCompanyName() bool {
	if o != nil && o.CompanyName != nil {
		return true
	}

	return false
}

// SetCompanyName gets a reference to the given string and assigns it to the CompanyName field.
func (o *InternationalFiling) SetCompanyName(v string) {
	o.CompanyName = &v
}

// GetFiledDate returns the FiledDate field value if set, zero value otherwise.
func (o *InternationalFiling) GetFiledDate() string {
	if o == nil || o.FiledDate == nil {
		var ret string
		return ret
	}
	return *o.FiledDate
}

// GetFiledDateOk returns a tuple with the FiledDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternationalFiling) GetFiledDateOk() (*string, bool) {
	if o == nil || o.FiledDate == nil {
		return nil, false
	}
	return o.FiledDate, true
}

// HasFiledDate returns a boolean if a field has been set.
func (o *InternationalFiling) HasFiledDate() bool {
	if o != nil && o.FiledDate != nil {
		return true
	}

	return false
}

// SetFiledDate gets a reference to the given string and assigns it to the FiledDate field.
func (o *InternationalFiling) SetFiledDate(v string) {
	o.FiledDate = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *InternationalFiling) GetCategory() string {
	if o == nil || o.Category == nil {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternationalFiling) GetCategoryOk() (*string, bool) {
	if o == nil || o.Category == nil {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *InternationalFiling) HasCategory() bool {
	if o != nil && o.Category != nil {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *InternationalFiling) SetCategory(v string) {
	o.Category = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *InternationalFiling) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternationalFiling) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *InternationalFiling) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *InternationalFiling) SetTitle(v string) {
	o.Title = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *InternationalFiling) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternationalFiling) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *InternationalFiling) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *InternationalFiling) SetDescription(v string) {
	o.Description = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *InternationalFiling) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternationalFiling) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *InternationalFiling) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *InternationalFiling) SetUrl(v string) {
	o.Url = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *InternationalFiling) GetLanguage() string {
	if o == nil || o.Language == nil {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternationalFiling) GetLanguageOk() (*string, bool) {
	if o == nil || o.Language == nil {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *InternationalFiling) HasLanguage() bool {
	if o != nil && o.Language != nil {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *InternationalFiling) SetLanguage(v string) {
	o.Language = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *InternationalFiling) GetCountry() string {
	if o == nil || o.Country == nil {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternationalFiling) GetCountryOk() (*string, bool) {
	if o == nil || o.Country == nil {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *InternationalFiling) HasCountry() bool {
	if o != nil && o.Country != nil {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *InternationalFiling) SetCountry(v string) {
	o.Country = &v
}

func (o InternationalFiling) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Symbol != nil {
		toSerialize["symbol"] = o.Symbol
	}
	if o.CompanyName != nil {
		toSerialize["companyName"] = o.CompanyName
	}
	if o.FiledDate != nil {
		toSerialize["filedDate"] = o.FiledDate
	}
	if o.Category != nil {
		toSerialize["category"] = o.Category
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if o.Language != nil {
		toSerialize["language"] = o.Language
	}
	if o.Country != nil {
		toSerialize["country"] = o.Country
	}
	return json.Marshal(toSerialize)
}

type NullableInternationalFiling struct {
	value *InternationalFiling
	isSet bool
}

func (v NullableInternationalFiling) Get() *InternationalFiling {
	return v.value
}

func (v *NullableInternationalFiling) Set(val *InternationalFiling) {
	v.value = val
	v.isSet = true
}

func (v NullableInternationalFiling) IsSet() bool {
	return v.isSet
}

func (v *NullableInternationalFiling) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInternationalFiling(val *InternationalFiling) *NullableInternationalFiling {
	return &NullableInternationalFiling{value: val, isSet: true}
}

func (v NullableInternationalFiling) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInternationalFiling) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


