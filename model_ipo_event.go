/*
Finnhub API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finnhub

import (
	"encoding/json"
)

// IPOEvent struct for IPOEvent
type IPOEvent struct {
	// Symbol.
	Symbol *string `json:"symbol,omitempty"`
	// IPO date.
	Date *string `json:"date,omitempty"`
	// Exchange.
	Exchange *string `json:"exchange,omitempty"`
	// Company's name.
	Name *string `json:"name,omitempty"`
	// IPO status. Can take 1 of the following values: <code>expected</code>,<code>priced</code>,<code>withdrawn</code>,<code>filed</code>
	Status *string `json:"status,omitempty"`
	// Projected price or price range.
	Price *string `json:"price,omitempty"`
	// Number of shares offered during the IPO.
	NumberOfShares *float32 `json:"numberOfShares,omitempty"`
	// Total shares value.
	TotalSharesValue *float32 `json:"totalSharesValue,omitempty"`
}

// NewIPOEvent instantiates a new IPOEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIPOEvent() *IPOEvent {
	this := IPOEvent{}
	return &this
}

// NewIPOEventWithDefaults instantiates a new IPOEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIPOEventWithDefaults() *IPOEvent {
	this := IPOEvent{}
	return &this
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *IPOEvent) GetSymbol() string {
	if o == nil || o.Symbol == nil {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPOEvent) GetSymbolOk() (*string, bool) {
	if o == nil || o.Symbol == nil {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *IPOEvent) HasSymbol() bool {
	if o != nil && o.Symbol != nil {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *IPOEvent) SetSymbol(v string) {
	o.Symbol = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *IPOEvent) GetDate() string {
	if o == nil || o.Date == nil {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPOEvent) GetDateOk() (*string, bool) {
	if o == nil || o.Date == nil {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *IPOEvent) HasDate() bool {
	if o != nil && o.Date != nil {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *IPOEvent) SetDate(v string) {
	o.Date = &v
}

// GetExchange returns the Exchange field value if set, zero value otherwise.
func (o *IPOEvent) GetExchange() string {
	if o == nil || o.Exchange == nil {
		var ret string
		return ret
	}
	return *o.Exchange
}

// GetExchangeOk returns a tuple with the Exchange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPOEvent) GetExchangeOk() (*string, bool) {
	if o == nil || o.Exchange == nil {
		return nil, false
	}
	return o.Exchange, true
}

// HasExchange returns a boolean if a field has been set.
func (o *IPOEvent) HasExchange() bool {
	if o != nil && o.Exchange != nil {
		return true
	}

	return false
}

// SetExchange gets a reference to the given string and assigns it to the Exchange field.
func (o *IPOEvent) SetExchange(v string) {
	o.Exchange = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IPOEvent) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPOEvent) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IPOEvent) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IPOEvent) SetName(v string) {
	o.Name = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *IPOEvent) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPOEvent) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *IPOEvent) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *IPOEvent) SetStatus(v string) {
	o.Status = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *IPOEvent) GetPrice() string {
	if o == nil || o.Price == nil {
		var ret string
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPOEvent) GetPriceOk() (*string, bool) {
	if o == nil || o.Price == nil {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *IPOEvent) HasPrice() bool {
	if o != nil && o.Price != nil {
		return true
	}

	return false
}

// SetPrice gets a reference to the given string and assigns it to the Price field.
func (o *IPOEvent) SetPrice(v string) {
	o.Price = &v
}

// GetNumberOfShares returns the NumberOfShares field value if set, zero value otherwise.
func (o *IPOEvent) GetNumberOfShares() float32 {
	if o == nil || o.NumberOfShares == nil {
		var ret float32
		return ret
	}
	return *o.NumberOfShares
}

// GetNumberOfSharesOk returns a tuple with the NumberOfShares field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPOEvent) GetNumberOfSharesOk() (*float32, bool) {
	if o == nil || o.NumberOfShares == nil {
		return nil, false
	}
	return o.NumberOfShares, true
}

// HasNumberOfShares returns a boolean if a field has been set.
func (o *IPOEvent) HasNumberOfShares() bool {
	if o != nil && o.NumberOfShares != nil {
		return true
	}

	return false
}

// SetNumberOfShares gets a reference to the given float32 and assigns it to the NumberOfShares field.
func (o *IPOEvent) SetNumberOfShares(v float32) {
	o.NumberOfShares = &v
}

// GetTotalSharesValue returns the TotalSharesValue field value if set, zero value otherwise.
func (o *IPOEvent) GetTotalSharesValue() float32 {
	if o == nil || o.TotalSharesValue == nil {
		var ret float32
		return ret
	}
	return *o.TotalSharesValue
}

// GetTotalSharesValueOk returns a tuple with the TotalSharesValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPOEvent) GetTotalSharesValueOk() (*float32, bool) {
	if o == nil || o.TotalSharesValue == nil {
		return nil, false
	}
	return o.TotalSharesValue, true
}

// HasTotalSharesValue returns a boolean if a field has been set.
func (o *IPOEvent) HasTotalSharesValue() bool {
	if o != nil && o.TotalSharesValue != nil {
		return true
	}

	return false
}

// SetTotalSharesValue gets a reference to the given float32 and assigns it to the TotalSharesValue field.
func (o *IPOEvent) SetTotalSharesValue(v float32) {
	o.TotalSharesValue = &v
}

func (o IPOEvent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Symbol != nil {
		toSerialize["symbol"] = o.Symbol
	}
	if o.Date != nil {
		toSerialize["date"] = o.Date
	}
	if o.Exchange != nil {
		toSerialize["exchange"] = o.Exchange
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Price != nil {
		toSerialize["price"] = o.Price
	}
	if o.NumberOfShares != nil {
		toSerialize["numberOfShares"] = o.NumberOfShares
	}
	if o.TotalSharesValue != nil {
		toSerialize["totalSharesValue"] = o.TotalSharesValue
	}
	return json.Marshal(toSerialize)
}

type NullableIPOEvent struct {
	value *IPOEvent
	isSet bool
}

func (v NullableIPOEvent) Get() *IPOEvent {
	return v.value
}

func (v *NullableIPOEvent) Set(val *IPOEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableIPOEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableIPOEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIPOEvent(val *IPOEvent) *NullableIPOEvent {
	return &NullableIPOEvent{value: val, isSet: true}
}

func (v NullableIPOEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIPOEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


