/*
Finnhub API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finnhub

import (
	"encoding/json"
)

// ETFsCountryExposure struct for ETFsCountryExposure
type ETFsCountryExposure struct {
	// ETF symbol.
	Symbol *string `json:"symbol,omitempty"`
	// Array of countries and and exposure levels.
	CountryExposure *[]ETFCountryExposureData `json:"countryExposure,omitempty"`
}

// NewETFsCountryExposure instantiates a new ETFsCountryExposure object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewETFsCountryExposure() *ETFsCountryExposure {
	this := ETFsCountryExposure{}
	return &this
}

// NewETFsCountryExposureWithDefaults instantiates a new ETFsCountryExposure object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewETFsCountryExposureWithDefaults() *ETFsCountryExposure {
	this := ETFsCountryExposure{}
	return &this
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *ETFsCountryExposure) GetSymbol() string {
	if o == nil || o.Symbol == nil {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ETFsCountryExposure) GetSymbolOk() (*string, bool) {
	if o == nil || o.Symbol == nil {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *ETFsCountryExposure) HasSymbol() bool {
	if o != nil && o.Symbol != nil {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *ETFsCountryExposure) SetSymbol(v string) {
	o.Symbol = &v
}

// GetCountryExposure returns the CountryExposure field value if set, zero value otherwise.
func (o *ETFsCountryExposure) GetCountryExposure() []ETFCountryExposureData {
	if o == nil || o.CountryExposure == nil {
		var ret []ETFCountryExposureData
		return ret
	}
	return *o.CountryExposure
}

// GetCountryExposureOk returns a tuple with the CountryExposure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ETFsCountryExposure) GetCountryExposureOk() (*[]ETFCountryExposureData, bool) {
	if o == nil || o.CountryExposure == nil {
		return nil, false
	}
	return o.CountryExposure, true
}

// HasCountryExposure returns a boolean if a field has been set.
func (o *ETFsCountryExposure) HasCountryExposure() bool {
	if o != nil && o.CountryExposure != nil {
		return true
	}

	return false
}

// SetCountryExposure gets a reference to the given []ETFCountryExposureData and assigns it to the CountryExposure field.
func (o *ETFsCountryExposure) SetCountryExposure(v []ETFCountryExposureData) {
	o.CountryExposure = &v
}

func (o ETFsCountryExposure) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Symbol != nil {
		toSerialize["symbol"] = o.Symbol
	}
	if o.CountryExposure != nil {
		toSerialize["countryExposure"] = o.CountryExposure
	}
	return json.Marshal(toSerialize)
}

type NullableETFsCountryExposure struct {
	value *ETFsCountryExposure
	isSet bool
}

func (v NullableETFsCountryExposure) Get() *ETFsCountryExposure {
	return v.value
}

func (v *NullableETFsCountryExposure) Set(val *ETFsCountryExposure) {
	v.value = val
	v.isSet = true
}

func (v NullableETFsCountryExposure) IsSet() bool {
	return v.isSet
}

func (v *NullableETFsCountryExposure) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableETFsCountryExposure(val *ETFsCountryExposure) *NullableETFsCountryExposure {
	return &NullableETFsCountryExposure{value: val, isSet: true}
}

func (v NullableETFsCountryExposure) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableETFsCountryExposure) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


