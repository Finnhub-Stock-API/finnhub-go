/*
Finnhub API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finnhub

import (
	"encoding/json"
)

// Development struct for Development
type Development struct {
	// Company symbol.
	Symbol *string `json:"symbol,omitempty"`
	// Published time in <code>YYYY-MM-DD HH:MM:SS</code> format.
	Datetime *string `json:"datetime,omitempty"`
	// Development headline.
	Headline *string `json:"headline,omitempty"`
	// Development description.
	Description *string `json:"description,omitempty"`
	// URL.
	Url *string `json:"url,omitempty"`
}

// NewDevelopment instantiates a new Development object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDevelopment() *Development {
	this := Development{}
	return &this
}

// NewDevelopmentWithDefaults instantiates a new Development object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDevelopmentWithDefaults() *Development {
	this := Development{}
	return &this
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *Development) GetSymbol() string {
	if o == nil || o.Symbol == nil {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Development) GetSymbolOk() (*string, bool) {
	if o == nil || o.Symbol == nil {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *Development) HasSymbol() bool {
	if o != nil && o.Symbol != nil {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *Development) SetSymbol(v string) {
	o.Symbol = &v
}

// GetDatetime returns the Datetime field value if set, zero value otherwise.
func (o *Development) GetDatetime() string {
	if o == nil || o.Datetime == nil {
		var ret string
		return ret
	}
	return *o.Datetime
}

// GetDatetimeOk returns a tuple with the Datetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Development) GetDatetimeOk() (*string, bool) {
	if o == nil || o.Datetime == nil {
		return nil, false
	}
	return o.Datetime, true
}

// HasDatetime returns a boolean if a field has been set.
func (o *Development) HasDatetime() bool {
	if o != nil && o.Datetime != nil {
		return true
	}

	return false
}

// SetDatetime gets a reference to the given string and assigns it to the Datetime field.
func (o *Development) SetDatetime(v string) {
	o.Datetime = &v
}

// GetHeadline returns the Headline field value if set, zero value otherwise.
func (o *Development) GetHeadline() string {
	if o == nil || o.Headline == nil {
		var ret string
		return ret
	}
	return *o.Headline
}

// GetHeadlineOk returns a tuple with the Headline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Development) GetHeadlineOk() (*string, bool) {
	if o == nil || o.Headline == nil {
		return nil, false
	}
	return o.Headline, true
}

// HasHeadline returns a boolean if a field has been set.
func (o *Development) HasHeadline() bool {
	if o != nil && o.Headline != nil {
		return true
	}

	return false
}

// SetHeadline gets a reference to the given string and assigns it to the Headline field.
func (o *Development) SetHeadline(v string) {
	o.Headline = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Development) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Development) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Development) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Development) SetDescription(v string) {
	o.Description = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *Development) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Development) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *Development) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *Development) SetUrl(v string) {
	o.Url = &v
}

func (o Development) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Symbol != nil {
		toSerialize["symbol"] = o.Symbol
	}
	if o.Datetime != nil {
		toSerialize["datetime"] = o.Datetime
	}
	if o.Headline != nil {
		toSerialize["headline"] = o.Headline
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	return json.Marshal(toSerialize)
}

type NullableDevelopment struct {
	value *Development
	isSet bool
}

func (v NullableDevelopment) Get() *Development {
	return v.value
}

func (v *NullableDevelopment) Set(val *Development) {
	v.value = val
	v.isSet = true
}

func (v NullableDevelopment) IsSet() bool {
	return v.isSet
}

func (v *NullableDevelopment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDevelopment(val *Development) *NullableDevelopment {
	return &NullableDevelopment{value: val, isSet: true}
}

func (v NullableDevelopment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDevelopment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


