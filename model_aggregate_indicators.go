/*
Finnhub API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finnhub

import (
	"encoding/json"
)

// AggregateIndicators struct for AggregateIndicators
type AggregateIndicators struct {
	TechnicalAnalysis *TechnicalAnalysis `json:"technicalAnalysis,omitempty"`
	Trend *Trend `json:"trend,omitempty"`
}

// NewAggregateIndicators instantiates a new AggregateIndicators object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAggregateIndicators() *AggregateIndicators {
	this := AggregateIndicators{}
	return &this
}

// NewAggregateIndicatorsWithDefaults instantiates a new AggregateIndicators object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAggregateIndicatorsWithDefaults() *AggregateIndicators {
	this := AggregateIndicators{}
	return &this
}

// GetTechnicalAnalysis returns the TechnicalAnalysis field value if set, zero value otherwise.
func (o *AggregateIndicators) GetTechnicalAnalysis() TechnicalAnalysis {
	if o == nil || o.TechnicalAnalysis == nil {
		var ret TechnicalAnalysis
		return ret
	}
	return *o.TechnicalAnalysis
}

// GetTechnicalAnalysisOk returns a tuple with the TechnicalAnalysis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AggregateIndicators) GetTechnicalAnalysisOk() (*TechnicalAnalysis, bool) {
	if o == nil || o.TechnicalAnalysis == nil {
		return nil, false
	}
	return o.TechnicalAnalysis, true
}

// HasTechnicalAnalysis returns a boolean if a field has been set.
func (o *AggregateIndicators) HasTechnicalAnalysis() bool {
	if o != nil && o.TechnicalAnalysis != nil {
		return true
	}

	return false
}

// SetTechnicalAnalysis gets a reference to the given TechnicalAnalysis and assigns it to the TechnicalAnalysis field.
func (o *AggregateIndicators) SetTechnicalAnalysis(v TechnicalAnalysis) {
	o.TechnicalAnalysis = &v
}

// GetTrend returns the Trend field value if set, zero value otherwise.
func (o *AggregateIndicators) GetTrend() Trend {
	if o == nil || o.Trend == nil {
		var ret Trend
		return ret
	}
	return *o.Trend
}

// GetTrendOk returns a tuple with the Trend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AggregateIndicators) GetTrendOk() (*Trend, bool) {
	if o == nil || o.Trend == nil {
		return nil, false
	}
	return o.Trend, true
}

// HasTrend returns a boolean if a field has been set.
func (o *AggregateIndicators) HasTrend() bool {
	if o != nil && o.Trend != nil {
		return true
	}

	return false
}

// SetTrend gets a reference to the given Trend and assigns it to the Trend field.
func (o *AggregateIndicators) SetTrend(v Trend) {
	o.Trend = &v
}

func (o AggregateIndicators) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TechnicalAnalysis != nil {
		toSerialize["technicalAnalysis"] = o.TechnicalAnalysis
	}
	if o.Trend != nil {
		toSerialize["trend"] = o.Trend
	}
	return json.Marshal(toSerialize)
}

type NullableAggregateIndicators struct {
	value *AggregateIndicators
	isSet bool
}

func (v NullableAggregateIndicators) Get() *AggregateIndicators {
	return v.value
}

func (v *NullableAggregateIndicators) Set(val *AggregateIndicators) {
	v.value = val
	v.isSet = true
}

func (v NullableAggregateIndicators) IsSet() bool {
	return v.isSet
}

func (v *NullableAggregateIndicators) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAggregateIndicators(val *AggregateIndicators) *NullableAggregateIndicators {
	return &NullableAggregateIndicators{value: val, isSet: true}
}

func (v NullableAggregateIndicators) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAggregateIndicators) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


