/*
Finnhub API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finnhub

import (
	"encoding/json"
)

// EarningsCallLiveResult struct for EarningsCallLiveResult
type EarningsCallLiveResult struct {
	// Symbol.
	Symbol *string `json:"symbol,omitempty"`
	// Event name.
	Event *string `json:"event,omitempty"`
	// Date time in UTC.
	Time *string `json:"time,omitempty"`
	// Earnings year.
	Year *int64 `json:"year,omitempty"`
	// Earnings quarter.
	Quarter *int64 `json:"quarter,omitempty"`
	// Live audio streaming file.
	LiveAudio *string `json:"liveAudio,omitempty"`
	// Recoding in mp3 format.
	Recording *string `json:"recording,omitempty"`
}

// NewEarningsCallLiveResult instantiates a new EarningsCallLiveResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEarningsCallLiveResult() *EarningsCallLiveResult {
	this := EarningsCallLiveResult{}
	return &this
}

// NewEarningsCallLiveResultWithDefaults instantiates a new EarningsCallLiveResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEarningsCallLiveResultWithDefaults() *EarningsCallLiveResult {
	this := EarningsCallLiveResult{}
	return &this
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *EarningsCallLiveResult) GetSymbol() string {
	if o == nil || o.Symbol == nil {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EarningsCallLiveResult) GetSymbolOk() (*string, bool) {
	if o == nil || o.Symbol == nil {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *EarningsCallLiveResult) HasSymbol() bool {
	if o != nil && o.Symbol != nil {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *EarningsCallLiveResult) SetSymbol(v string) {
	o.Symbol = &v
}

// GetEvent returns the Event field value if set, zero value otherwise.
func (o *EarningsCallLiveResult) GetEvent() string {
	if o == nil || o.Event == nil {
		var ret string
		return ret
	}
	return *o.Event
}

// GetEventOk returns a tuple with the Event field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EarningsCallLiveResult) GetEventOk() (*string, bool) {
	if o == nil || o.Event == nil {
		return nil, false
	}
	return o.Event, true
}

// HasEvent returns a boolean if a field has been set.
func (o *EarningsCallLiveResult) HasEvent() bool {
	if o != nil && o.Event != nil {
		return true
	}

	return false
}

// SetEvent gets a reference to the given string and assigns it to the Event field.
func (o *EarningsCallLiveResult) SetEvent(v string) {
	o.Event = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *EarningsCallLiveResult) GetTime() string {
	if o == nil || o.Time == nil {
		var ret string
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EarningsCallLiveResult) GetTimeOk() (*string, bool) {
	if o == nil || o.Time == nil {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *EarningsCallLiveResult) HasTime() bool {
	if o != nil && o.Time != nil {
		return true
	}

	return false
}

// SetTime gets a reference to the given string and assigns it to the Time field.
func (o *EarningsCallLiveResult) SetTime(v string) {
	o.Time = &v
}

// GetYear returns the Year field value if set, zero value otherwise.
func (o *EarningsCallLiveResult) GetYear() int64 {
	if o == nil || o.Year == nil {
		var ret int64
		return ret
	}
	return *o.Year
}

// GetYearOk returns a tuple with the Year field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EarningsCallLiveResult) GetYearOk() (*int64, bool) {
	if o == nil || o.Year == nil {
		return nil, false
	}
	return o.Year, true
}

// HasYear returns a boolean if a field has been set.
func (o *EarningsCallLiveResult) HasYear() bool {
	if o != nil && o.Year != nil {
		return true
	}

	return false
}

// SetYear gets a reference to the given int64 and assigns it to the Year field.
func (o *EarningsCallLiveResult) SetYear(v int64) {
	o.Year = &v
}

// GetQuarter returns the Quarter field value if set, zero value otherwise.
func (o *EarningsCallLiveResult) GetQuarter() int64 {
	if o == nil || o.Quarter == nil {
		var ret int64
		return ret
	}
	return *o.Quarter
}

// GetQuarterOk returns a tuple with the Quarter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EarningsCallLiveResult) GetQuarterOk() (*int64, bool) {
	if o == nil || o.Quarter == nil {
		return nil, false
	}
	return o.Quarter, true
}

// HasQuarter returns a boolean if a field has been set.
func (o *EarningsCallLiveResult) HasQuarter() bool {
	if o != nil && o.Quarter != nil {
		return true
	}

	return false
}

// SetQuarter gets a reference to the given int64 and assigns it to the Quarter field.
func (o *EarningsCallLiveResult) SetQuarter(v int64) {
	o.Quarter = &v
}

// GetLiveAudio returns the LiveAudio field value if set, zero value otherwise.
func (o *EarningsCallLiveResult) GetLiveAudio() string {
	if o == nil || o.LiveAudio == nil {
		var ret string
		return ret
	}
	return *o.LiveAudio
}

// GetLiveAudioOk returns a tuple with the LiveAudio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EarningsCallLiveResult) GetLiveAudioOk() (*string, bool) {
	if o == nil || o.LiveAudio == nil {
		return nil, false
	}
	return o.LiveAudio, true
}

// HasLiveAudio returns a boolean if a field has been set.
func (o *EarningsCallLiveResult) HasLiveAudio() bool {
	if o != nil && o.LiveAudio != nil {
		return true
	}

	return false
}

// SetLiveAudio gets a reference to the given string and assigns it to the LiveAudio field.
func (o *EarningsCallLiveResult) SetLiveAudio(v string) {
	o.LiveAudio = &v
}

// GetRecording returns the Recording field value if set, zero value otherwise.
func (o *EarningsCallLiveResult) GetRecording() string {
	if o == nil || o.Recording == nil {
		var ret string
		return ret
	}
	return *o.Recording
}

// GetRecordingOk returns a tuple with the Recording field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EarningsCallLiveResult) GetRecordingOk() (*string, bool) {
	if o == nil || o.Recording == nil {
		return nil, false
	}
	return o.Recording, true
}

// HasRecording returns a boolean if a field has been set.
func (o *EarningsCallLiveResult) HasRecording() bool {
	if o != nil && o.Recording != nil {
		return true
	}

	return false
}

// SetRecording gets a reference to the given string and assigns it to the Recording field.
func (o *EarningsCallLiveResult) SetRecording(v string) {
	o.Recording = &v
}

func (o EarningsCallLiveResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Symbol != nil {
		toSerialize["symbol"] = o.Symbol
	}
	if o.Event != nil {
		toSerialize["event"] = o.Event
	}
	if o.Time != nil {
		toSerialize["time"] = o.Time
	}
	if o.Year != nil {
		toSerialize["year"] = o.Year
	}
	if o.Quarter != nil {
		toSerialize["quarter"] = o.Quarter
	}
	if o.LiveAudio != nil {
		toSerialize["liveAudio"] = o.LiveAudio
	}
	if o.Recording != nil {
		toSerialize["recording"] = o.Recording
	}
	return json.Marshal(toSerialize)
}

type NullableEarningsCallLiveResult struct {
	value *EarningsCallLiveResult
	isSet bool
}

func (v NullableEarningsCallLiveResult) Get() *EarningsCallLiveResult {
	return v.value
}

func (v *NullableEarningsCallLiveResult) Set(val *EarningsCallLiveResult) {
	v.value = val
	v.isSet = true
}

func (v NullableEarningsCallLiveResult) IsSet() bool {
	return v.isSet
}

func (v *NullableEarningsCallLiveResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEarningsCallLiveResult(val *EarningsCallLiveResult) *NullableEarningsCallLiveResult {
	return &NullableEarningsCallLiveResult{value: val, isSet: true}
}

func (v NullableEarningsCallLiveResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEarningsCallLiveResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


