/*
Finnhub API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finnhub

import (
	"encoding/json"
)

// MarketHoliday struct for MarketHoliday
type MarketHoliday struct {
	// Timezone.
	Timezone *string `json:"timezone,omitempty"`
	// Exchange.
	Exchange *string `json:"exchange,omitempty"`
	// Array of holidays.
	Data *[]MarketHolidayData `json:"data,omitempty"`
}

// NewMarketHoliday instantiates a new MarketHoliday object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMarketHoliday() *MarketHoliday {
	this := MarketHoliday{}
	return &this
}

// NewMarketHolidayWithDefaults instantiates a new MarketHoliday object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMarketHolidayWithDefaults() *MarketHoliday {
	this := MarketHoliday{}
	return &this
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *MarketHoliday) GetTimezone() string {
	if o == nil || o.Timezone == nil {
		var ret string
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketHoliday) GetTimezoneOk() (*string, bool) {
	if o == nil || o.Timezone == nil {
		return nil, false
	}
	return o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *MarketHoliday) HasTimezone() bool {
	if o != nil && o.Timezone != nil {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given string and assigns it to the Timezone field.
func (o *MarketHoliday) SetTimezone(v string) {
	o.Timezone = &v
}

// GetExchange returns the Exchange field value if set, zero value otherwise.
func (o *MarketHoliday) GetExchange() string {
	if o == nil || o.Exchange == nil {
		var ret string
		return ret
	}
	return *o.Exchange
}

// GetExchangeOk returns a tuple with the Exchange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketHoliday) GetExchangeOk() (*string, bool) {
	if o == nil || o.Exchange == nil {
		return nil, false
	}
	return o.Exchange, true
}

// HasExchange returns a boolean if a field has been set.
func (o *MarketHoliday) HasExchange() bool {
	if o != nil && o.Exchange != nil {
		return true
	}

	return false
}

// SetExchange gets a reference to the given string and assigns it to the Exchange field.
func (o *MarketHoliday) SetExchange(v string) {
	o.Exchange = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *MarketHoliday) GetData() []MarketHolidayData {
	if o == nil || o.Data == nil {
		var ret []MarketHolidayData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketHoliday) GetDataOk() (*[]MarketHolidayData, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *MarketHoliday) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given []MarketHolidayData and assigns it to the Data field.
func (o *MarketHoliday) SetData(v []MarketHolidayData) {
	o.Data = &v
}

func (o MarketHoliday) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Timezone != nil {
		toSerialize["timezone"] = o.Timezone
	}
	if o.Exchange != nil {
		toSerialize["exchange"] = o.Exchange
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableMarketHoliday struct {
	value *MarketHoliday
	isSet bool
}

func (v NullableMarketHoliday) Get() *MarketHoliday {
	return v.value
}

func (v *NullableMarketHoliday) Set(val *MarketHoliday) {
	v.value = val
	v.isSet = true
}

func (v NullableMarketHoliday) IsSet() bool {
	return v.isSet
}

func (v *NullableMarketHoliday) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMarketHoliday(val *MarketHoliday) *NullableMarketHoliday {
	return &NullableMarketHoliday{value: val, isSet: true}
}

func (v NullableMarketHoliday) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMarketHoliday) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


