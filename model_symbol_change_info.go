/*
Finnhub API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finnhub

import (
	"encoding/json"
)

// SymbolChangeInfo struct for SymbolChangeInfo
type SymbolChangeInfo struct {
	// Event's date.
	AtDate *string `json:"atDate,omitempty"`
	// Old symbol.
	OldSymbol *string `json:"oldSymbol,omitempty"`
	// New symbol.
	NewSymbol *string `json:"newSymbol,omitempty"`
}

// NewSymbolChangeInfo instantiates a new SymbolChangeInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSymbolChangeInfo() *SymbolChangeInfo {
	this := SymbolChangeInfo{}
	return &this
}

// NewSymbolChangeInfoWithDefaults instantiates a new SymbolChangeInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSymbolChangeInfoWithDefaults() *SymbolChangeInfo {
	this := SymbolChangeInfo{}
	return &this
}

// GetAtDate returns the AtDate field value if set, zero value otherwise.
func (o *SymbolChangeInfo) GetAtDate() string {
	if o == nil || o.AtDate == nil {
		var ret string
		return ret
	}
	return *o.AtDate
}

// GetAtDateOk returns a tuple with the AtDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SymbolChangeInfo) GetAtDateOk() (*string, bool) {
	if o == nil || o.AtDate == nil {
		return nil, false
	}
	return o.AtDate, true
}

// HasAtDate returns a boolean if a field has been set.
func (o *SymbolChangeInfo) HasAtDate() bool {
	if o != nil && o.AtDate != nil {
		return true
	}

	return false
}

// SetAtDate gets a reference to the given string and assigns it to the AtDate field.
func (o *SymbolChangeInfo) SetAtDate(v string) {
	o.AtDate = &v
}

// GetOldSymbol returns the OldSymbol field value if set, zero value otherwise.
func (o *SymbolChangeInfo) GetOldSymbol() string {
	if o == nil || o.OldSymbol == nil {
		var ret string
		return ret
	}
	return *o.OldSymbol
}

// GetOldSymbolOk returns a tuple with the OldSymbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SymbolChangeInfo) GetOldSymbolOk() (*string, bool) {
	if o == nil || o.OldSymbol == nil {
		return nil, false
	}
	return o.OldSymbol, true
}

// HasOldSymbol returns a boolean if a field has been set.
func (o *SymbolChangeInfo) HasOldSymbol() bool {
	if o != nil && o.OldSymbol != nil {
		return true
	}

	return false
}

// SetOldSymbol gets a reference to the given string and assigns it to the OldSymbol field.
func (o *SymbolChangeInfo) SetOldSymbol(v string) {
	o.OldSymbol = &v
}

// GetNewSymbol returns the NewSymbol field value if set, zero value otherwise.
func (o *SymbolChangeInfo) GetNewSymbol() string {
	if o == nil || o.NewSymbol == nil {
		var ret string
		return ret
	}
	return *o.NewSymbol
}

// GetNewSymbolOk returns a tuple with the NewSymbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SymbolChangeInfo) GetNewSymbolOk() (*string, bool) {
	if o == nil || o.NewSymbol == nil {
		return nil, false
	}
	return o.NewSymbol, true
}

// HasNewSymbol returns a boolean if a field has been set.
func (o *SymbolChangeInfo) HasNewSymbol() bool {
	if o != nil && o.NewSymbol != nil {
		return true
	}

	return false
}

// SetNewSymbol gets a reference to the given string and assigns it to the NewSymbol field.
func (o *SymbolChangeInfo) SetNewSymbol(v string) {
	o.NewSymbol = &v
}

func (o SymbolChangeInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AtDate != nil {
		toSerialize["atDate"] = o.AtDate
	}
	if o.OldSymbol != nil {
		toSerialize["oldSymbol"] = o.OldSymbol
	}
	if o.NewSymbol != nil {
		toSerialize["newSymbol"] = o.NewSymbol
	}
	return json.Marshal(toSerialize)
}

type NullableSymbolChangeInfo struct {
	value *SymbolChangeInfo
	isSet bool
}

func (v NullableSymbolChangeInfo) Get() *SymbolChangeInfo {
	return v.value
}

func (v *NullableSymbolChangeInfo) Set(val *SymbolChangeInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableSymbolChangeInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableSymbolChangeInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSymbolChangeInfo(val *SymbolChangeInfo) *NullableSymbolChangeInfo {
	return &NullableSymbolChangeInfo{value: val, isSet: true}
}

func (v NullableSymbolChangeInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSymbolChangeInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


