/*
Finnhub API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finnhub

import (
	"encoding/json"
)

// EconomicCode struct for EconomicCode
type EconomicCode struct {
	// Finnhub economic code used to get historical data
	Code *string `json:"code,omitempty"`
	// Country
	Country *string `json:"country,omitempty"`
	// Indicator name
	Name *string `json:"name,omitempty"`
	// Unit
	Unit *string `json:"unit,omitempty"`
}

// NewEconomicCode instantiates a new EconomicCode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEconomicCode() *EconomicCode {
	this := EconomicCode{}
	return &this
}

// NewEconomicCodeWithDefaults instantiates a new EconomicCode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEconomicCodeWithDefaults() *EconomicCode {
	this := EconomicCode{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *EconomicCode) GetCode() string {
	if o == nil || o.Code == nil {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EconomicCode) GetCodeOk() (*string, bool) {
	if o == nil || o.Code == nil {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *EconomicCode) HasCode() bool {
	if o != nil && o.Code != nil {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *EconomicCode) SetCode(v string) {
	o.Code = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *EconomicCode) GetCountry() string {
	if o == nil || o.Country == nil {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EconomicCode) GetCountryOk() (*string, bool) {
	if o == nil || o.Country == nil {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *EconomicCode) HasCountry() bool {
	if o != nil && o.Country != nil {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *EconomicCode) SetCountry(v string) {
	o.Country = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EconomicCode) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EconomicCode) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EconomicCode) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EconomicCode) SetName(v string) {
	o.Name = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *EconomicCode) GetUnit() string {
	if o == nil || o.Unit == nil {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EconomicCode) GetUnitOk() (*string, bool) {
	if o == nil || o.Unit == nil {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *EconomicCode) HasUnit() bool {
	if o != nil && o.Unit != nil {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *EconomicCode) SetUnit(v string) {
	o.Unit = &v
}

func (o EconomicCode) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Code != nil {
		toSerialize["code"] = o.Code
	}
	if o.Country != nil {
		toSerialize["country"] = o.Country
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Unit != nil {
		toSerialize["unit"] = o.Unit
	}
	return json.Marshal(toSerialize)
}

type NullableEconomicCode struct {
	value *EconomicCode
	isSet bool
}

func (v NullableEconomicCode) Get() *EconomicCode {
	return v.value
}

func (v *NullableEconomicCode) Set(val *EconomicCode) {
	v.value = val
	v.isSet = true
}

func (v NullableEconomicCode) IsSet() bool {
	return v.isSet
}

func (v *NullableEconomicCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEconomicCode(val *EconomicCode) *NullableEconomicCode {
	return &NullableEconomicCode{value: val, isSet: true}
}

func (v NullableEconomicCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEconomicCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


