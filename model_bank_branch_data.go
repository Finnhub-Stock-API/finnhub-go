/*
Finnhub API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finnhub

import (
	"encoding/json"
)

// BankBranchData struct for BankBranchData
type BankBranchData struct {
	// Branch ID
	BranchId *string `json:"branchId,omitempty"`
	// Branch address
	Address *string `json:"address,omitempty"`
	// State
	State *string `json:"state,omitempty"`
	//  Zip code
	ZipCode *string `json:"zipCode,omitempty"`
	// Date opened
	Date *string `json:"date,omitempty"`
}

// NewBankBranchData instantiates a new BankBranchData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBankBranchData() *BankBranchData {
	this := BankBranchData{}
	return &this
}

// NewBankBranchDataWithDefaults instantiates a new BankBranchData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBankBranchDataWithDefaults() *BankBranchData {
	this := BankBranchData{}
	return &this
}

// GetBranchId returns the BranchId field value if set, zero value otherwise.
func (o *BankBranchData) GetBranchId() string {
	if o == nil || o.BranchId == nil {
		var ret string
		return ret
	}
	return *o.BranchId
}

// GetBranchIdOk returns a tuple with the BranchId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BankBranchData) GetBranchIdOk() (*string, bool) {
	if o == nil || o.BranchId == nil {
		return nil, false
	}
	return o.BranchId, true
}

// HasBranchId returns a boolean if a field has been set.
func (o *BankBranchData) HasBranchId() bool {
	if o != nil && o.BranchId != nil {
		return true
	}

	return false
}

// SetBranchId gets a reference to the given string and assigns it to the BranchId field.
func (o *BankBranchData) SetBranchId(v string) {
	o.BranchId = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *BankBranchData) GetAddress() string {
	if o == nil || o.Address == nil {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BankBranchData) GetAddressOk() (*string, bool) {
	if o == nil || o.Address == nil {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *BankBranchData) HasAddress() bool {
	if o != nil && o.Address != nil {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *BankBranchData) SetAddress(v string) {
	o.Address = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *BankBranchData) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BankBranchData) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *BankBranchData) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *BankBranchData) SetState(v string) {
	o.State = &v
}

// GetZipCode returns the ZipCode field value if set, zero value otherwise.
func (o *BankBranchData) GetZipCode() string {
	if o == nil || o.ZipCode == nil {
		var ret string
		return ret
	}
	return *o.ZipCode
}

// GetZipCodeOk returns a tuple with the ZipCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BankBranchData) GetZipCodeOk() (*string, bool) {
	if o == nil || o.ZipCode == nil {
		return nil, false
	}
	return o.ZipCode, true
}

// HasZipCode returns a boolean if a field has been set.
func (o *BankBranchData) HasZipCode() bool {
	if o != nil && o.ZipCode != nil {
		return true
	}

	return false
}

// SetZipCode gets a reference to the given string and assigns it to the ZipCode field.
func (o *BankBranchData) SetZipCode(v string) {
	o.ZipCode = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *BankBranchData) GetDate() string {
	if o == nil || o.Date == nil {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BankBranchData) GetDateOk() (*string, bool) {
	if o == nil || o.Date == nil {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *BankBranchData) HasDate() bool {
	if o != nil && o.Date != nil {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *BankBranchData) SetDate(v string) {
	o.Date = &v
}

func (o BankBranchData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BranchId != nil {
		toSerialize["branchId"] = o.BranchId
	}
	if o.Address != nil {
		toSerialize["address"] = o.Address
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.ZipCode != nil {
		toSerialize["zipCode"] = o.ZipCode
	}
	if o.Date != nil {
		toSerialize["date"] = o.Date
	}
	return json.Marshal(toSerialize)
}

type NullableBankBranchData struct {
	value *BankBranchData
	isSet bool
}

func (v NullableBankBranchData) Get() *BankBranchData {
	return v.value
}

func (v *NullableBankBranchData) Set(val *BankBranchData) {
	v.value = val
	v.isSet = true
}

func (v NullableBankBranchData) IsSet() bool {
	return v.isSet
}

func (v *NullableBankBranchData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBankBranchData(val *BankBranchData) *NullableBankBranchData {
	return &NullableBankBranchData{value: val, isSet: true}
}

func (v NullableBankBranchData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBankBranchData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


