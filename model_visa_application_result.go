/*
Finnhub API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finnhub

import (
	"encoding/json"
)

// VisaApplicationResult struct for VisaApplicationResult
type VisaApplicationResult struct {
	// Symbol.
	Symbol *string `json:"symbol,omitempty"`
	// Array of H1b and Permanent visa applications.
	Data *[]VisaApplication `json:"data,omitempty"`
}

// NewVisaApplicationResult instantiates a new VisaApplicationResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVisaApplicationResult() *VisaApplicationResult {
	this := VisaApplicationResult{}
	return &this
}

// NewVisaApplicationResultWithDefaults instantiates a new VisaApplicationResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVisaApplicationResultWithDefaults() *VisaApplicationResult {
	this := VisaApplicationResult{}
	return &this
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *VisaApplicationResult) GetSymbol() string {
	if o == nil || o.Symbol == nil {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisaApplicationResult) GetSymbolOk() (*string, bool) {
	if o == nil || o.Symbol == nil {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *VisaApplicationResult) HasSymbol() bool {
	if o != nil && o.Symbol != nil {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *VisaApplicationResult) SetSymbol(v string) {
	o.Symbol = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *VisaApplicationResult) GetData() []VisaApplication {
	if o == nil || o.Data == nil {
		var ret []VisaApplication
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VisaApplicationResult) GetDataOk() (*[]VisaApplication, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *VisaApplicationResult) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given []VisaApplication and assigns it to the Data field.
func (o *VisaApplicationResult) SetData(v []VisaApplication) {
	o.Data = &v
}

func (o VisaApplicationResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Symbol != nil {
		toSerialize["symbol"] = o.Symbol
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableVisaApplicationResult struct {
	value *VisaApplicationResult
	isSet bool
}

func (v NullableVisaApplicationResult) Get() *VisaApplicationResult {
	return v.value
}

func (v *NullableVisaApplicationResult) Set(val *VisaApplicationResult) {
	v.value = val
	v.isSet = true
}

func (v NullableVisaApplicationResult) IsSet() bool {
	return v.isSet
}

func (v *NullableVisaApplicationResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVisaApplicationResult(val *VisaApplicationResult) *NullableVisaApplicationResult {
	return &NullableVisaApplicationResult{value: val, isSet: true}
}

func (v NullableVisaApplicationResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVisaApplicationResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


