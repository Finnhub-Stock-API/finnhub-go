/*
Finnhub API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finnhub

import (
	"encoding/json"
)

// PresentationData struct for PresentationData
type PresentationData struct {
	// Quarter
	Quarter *int64 `json:"quarter,omitempty"`
	// Year
	Year *int64 `json:"year,omitempty"`
	// Presentation url
	Url *string `json:"url,omitempty"`
	// Title
	Title *string `json:"title,omitempty"`
	// At Time.
	AtTime *string `json:"atTime,omitempty"`
}

// NewPresentationData instantiates a new PresentationData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPresentationData() *PresentationData {
	this := PresentationData{}
	return &this
}

// NewPresentationDataWithDefaults instantiates a new PresentationData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPresentationDataWithDefaults() *PresentationData {
	this := PresentationData{}
	return &this
}

// GetQuarter returns the Quarter field value if set, zero value otherwise.
func (o *PresentationData) GetQuarter() int64 {
	if o == nil || o.Quarter == nil {
		var ret int64
		return ret
	}
	return *o.Quarter
}

// GetQuarterOk returns a tuple with the Quarter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PresentationData) GetQuarterOk() (*int64, bool) {
	if o == nil || o.Quarter == nil {
		return nil, false
	}
	return o.Quarter, true
}

// HasQuarter returns a boolean if a field has been set.
func (o *PresentationData) HasQuarter() bool {
	if o != nil && o.Quarter != nil {
		return true
	}

	return false
}

// SetQuarter gets a reference to the given int64 and assigns it to the Quarter field.
func (o *PresentationData) SetQuarter(v int64) {
	o.Quarter = &v
}

// GetYear returns the Year field value if set, zero value otherwise.
func (o *PresentationData) GetYear() int64 {
	if o == nil || o.Year == nil {
		var ret int64
		return ret
	}
	return *o.Year
}

// GetYearOk returns a tuple with the Year field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PresentationData) GetYearOk() (*int64, bool) {
	if o == nil || o.Year == nil {
		return nil, false
	}
	return o.Year, true
}

// HasYear returns a boolean if a field has been set.
func (o *PresentationData) HasYear() bool {
	if o != nil && o.Year != nil {
		return true
	}

	return false
}

// SetYear gets a reference to the given int64 and assigns it to the Year field.
func (o *PresentationData) SetYear(v int64) {
	o.Year = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *PresentationData) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PresentationData) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *PresentationData) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *PresentationData) SetUrl(v string) {
	o.Url = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *PresentationData) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PresentationData) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *PresentationData) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *PresentationData) SetTitle(v string) {
	o.Title = &v
}

// GetAtTime returns the AtTime field value if set, zero value otherwise.
func (o *PresentationData) GetAtTime() string {
	if o == nil || o.AtTime == nil {
		var ret string
		return ret
	}
	return *o.AtTime
}

// GetAtTimeOk returns a tuple with the AtTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PresentationData) GetAtTimeOk() (*string, bool) {
	if o == nil || o.AtTime == nil {
		return nil, false
	}
	return o.AtTime, true
}

// HasAtTime returns a boolean if a field has been set.
func (o *PresentationData) HasAtTime() bool {
	if o != nil && o.AtTime != nil {
		return true
	}

	return false
}

// SetAtTime gets a reference to the given string and assigns it to the AtTime field.
func (o *PresentationData) SetAtTime(v string) {
	o.AtTime = &v
}

func (o PresentationData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Quarter != nil {
		toSerialize["quarter"] = o.Quarter
	}
	if o.Year != nil {
		toSerialize["year"] = o.Year
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	if o.AtTime != nil {
		toSerialize["atTime"] = o.AtTime
	}
	return json.Marshal(toSerialize)
}

type NullablePresentationData struct {
	value *PresentationData
	isSet bool
}

func (v NullablePresentationData) Get() *PresentationData {
	return v.value
}

func (v *NullablePresentationData) Set(val *PresentationData) {
	v.value = val
	v.isSet = true
}

func (v NullablePresentationData) IsSet() bool {
	return v.isSet
}

func (v *NullablePresentationData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePresentationData(val *PresentationData) *NullablePresentationData {
	return &NullablePresentationData{value: val, isSet: true}
}

func (v NullablePresentationData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePresentationData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


