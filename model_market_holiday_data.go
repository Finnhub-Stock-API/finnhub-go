/*
Finnhub API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finnhub

import (
	"encoding/json"
)

// MarketHolidayData struct for MarketHolidayData
type MarketHolidayData struct {
	// Holiday's name.
	EventName *string `json:"eventName,omitempty"`
	// Date.
	AtDate *string `json:"atDate,omitempty"`
	// Trading hours for this day if the market is partially closed only.
	TradingHour *string `json:"tradingHour,omitempty"`
}

// NewMarketHolidayData instantiates a new MarketHolidayData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMarketHolidayData() *MarketHolidayData {
	this := MarketHolidayData{}
	return &this
}

// NewMarketHolidayDataWithDefaults instantiates a new MarketHolidayData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMarketHolidayDataWithDefaults() *MarketHolidayData {
	this := MarketHolidayData{}
	return &this
}

// GetEventName returns the EventName field value if set, zero value otherwise.
func (o *MarketHolidayData) GetEventName() string {
	if o == nil || o.EventName == nil {
		var ret string
		return ret
	}
	return *o.EventName
}

// GetEventNameOk returns a tuple with the EventName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketHolidayData) GetEventNameOk() (*string, bool) {
	if o == nil || o.EventName == nil {
		return nil, false
	}
	return o.EventName, true
}

// HasEventName returns a boolean if a field has been set.
func (o *MarketHolidayData) HasEventName() bool {
	if o != nil && o.EventName != nil {
		return true
	}

	return false
}

// SetEventName gets a reference to the given string and assigns it to the EventName field.
func (o *MarketHolidayData) SetEventName(v string) {
	o.EventName = &v
}

// GetAtDate returns the AtDate field value if set, zero value otherwise.
func (o *MarketHolidayData) GetAtDate() string {
	if o == nil || o.AtDate == nil {
		var ret string
		return ret
	}
	return *o.AtDate
}

// GetAtDateOk returns a tuple with the AtDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketHolidayData) GetAtDateOk() (*string, bool) {
	if o == nil || o.AtDate == nil {
		return nil, false
	}
	return o.AtDate, true
}

// HasAtDate returns a boolean if a field has been set.
func (o *MarketHolidayData) HasAtDate() bool {
	if o != nil && o.AtDate != nil {
		return true
	}

	return false
}

// SetAtDate gets a reference to the given string and assigns it to the AtDate field.
func (o *MarketHolidayData) SetAtDate(v string) {
	o.AtDate = &v
}

// GetTradingHour returns the TradingHour field value if set, zero value otherwise.
func (o *MarketHolidayData) GetTradingHour() string {
	if o == nil || o.TradingHour == nil {
		var ret string
		return ret
	}
	return *o.TradingHour
}

// GetTradingHourOk returns a tuple with the TradingHour field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketHolidayData) GetTradingHourOk() (*string, bool) {
	if o == nil || o.TradingHour == nil {
		return nil, false
	}
	return o.TradingHour, true
}

// HasTradingHour returns a boolean if a field has been set.
func (o *MarketHolidayData) HasTradingHour() bool {
	if o != nil && o.TradingHour != nil {
		return true
	}

	return false
}

// SetTradingHour gets a reference to the given string and assigns it to the TradingHour field.
func (o *MarketHolidayData) SetTradingHour(v string) {
	o.TradingHour = &v
}

func (o MarketHolidayData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EventName != nil {
		toSerialize["eventName"] = o.EventName
	}
	if o.AtDate != nil {
		toSerialize["atDate"] = o.AtDate
	}
	if o.TradingHour != nil {
		toSerialize["tradingHour"] = o.TradingHour
	}
	return json.Marshal(toSerialize)
}

type NullableMarketHolidayData struct {
	value *MarketHolidayData
	isSet bool
}

func (v NullableMarketHolidayData) Get() *MarketHolidayData {
	return v.value
}

func (v *NullableMarketHolidayData) Set(val *MarketHolidayData) {
	v.value = val
	v.isSet = true
}

func (v NullableMarketHolidayData) IsSet() bool {
	return v.isSet
}

func (v *NullableMarketHolidayData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMarketHolidayData(val *MarketHolidayData) *NullableMarketHolidayData {
	return &NullableMarketHolidayData{value: val, isSet: true}
}

func (v NullableMarketHolidayData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMarketHolidayData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


