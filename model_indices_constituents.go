/*
Finnhub API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finnhub

import (
	"encoding/json"
)

// IndicesConstituents struct for IndicesConstituents
type IndicesConstituents struct {
	// Index's symbol.
	Symbol *string `json:"symbol,omitempty"`
	// Array of constituents.
	Constituents *[]string `json:"constituents,omitempty"`
}

// NewIndicesConstituents instantiates a new IndicesConstituents object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIndicesConstituents() *IndicesConstituents {
	this := IndicesConstituents{}
	return &this
}

// NewIndicesConstituentsWithDefaults instantiates a new IndicesConstituents object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIndicesConstituentsWithDefaults() *IndicesConstituents {
	this := IndicesConstituents{}
	return &this
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *IndicesConstituents) GetSymbol() string {
	if o == nil || o.Symbol == nil {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicesConstituents) GetSymbolOk() (*string, bool) {
	if o == nil || o.Symbol == nil {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *IndicesConstituents) HasSymbol() bool {
	if o != nil && o.Symbol != nil {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *IndicesConstituents) SetSymbol(v string) {
	o.Symbol = &v
}

// GetConstituents returns the Constituents field value if set, zero value otherwise.
func (o *IndicesConstituents) GetConstituents() []string {
	if o == nil || o.Constituents == nil {
		var ret []string
		return ret
	}
	return *o.Constituents
}

// GetConstituentsOk returns a tuple with the Constituents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndicesConstituents) GetConstituentsOk() (*[]string, bool) {
	if o == nil || o.Constituents == nil {
		return nil, false
	}
	return o.Constituents, true
}

// HasConstituents returns a boolean if a field has been set.
func (o *IndicesConstituents) HasConstituents() bool {
	if o != nil && o.Constituents != nil {
		return true
	}

	return false
}

// SetConstituents gets a reference to the given []string and assigns it to the Constituents field.
func (o *IndicesConstituents) SetConstituents(v []string) {
	o.Constituents = &v
}

func (o IndicesConstituents) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Symbol != nil {
		toSerialize["symbol"] = o.Symbol
	}
	if o.Constituents != nil {
		toSerialize["constituents"] = o.Constituents
	}
	return json.Marshal(toSerialize)
}

type NullableIndicesConstituents struct {
	value *IndicesConstituents
	isSet bool
}

func (v NullableIndicesConstituents) Get() *IndicesConstituents {
	return v.value
}

func (v *NullableIndicesConstituents) Set(val *IndicesConstituents) {
	v.value = val
	v.isSet = true
}

func (v NullableIndicesConstituents) IsSet() bool {
	return v.isSet
}

func (v *NullableIndicesConstituents) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndicesConstituents(val *IndicesConstituents) *NullableIndicesConstituents {
	return &NullableIndicesConstituents{value: val, isSet: true}
}

func (v NullableIndicesConstituents) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndicesConstituents) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


