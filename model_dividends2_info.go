/*
Finnhub API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finnhub

import (
	"encoding/json"
)

// Dividends2Info struct for Dividends2Info
type Dividends2Info struct {
	// Ex-Dividend date.
	ExDate *string `json:"exDate,omitempty"`
	// Amount in local currency.
	Amount *float32 `json:"amount,omitempty"`
}

// NewDividends2Info instantiates a new Dividends2Info object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDividends2Info() *Dividends2Info {
	this := Dividends2Info{}
	return &this
}

// NewDividends2InfoWithDefaults instantiates a new Dividends2Info object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDividends2InfoWithDefaults() *Dividends2Info {
	this := Dividends2Info{}
	return &this
}

// GetExDate returns the ExDate field value if set, zero value otherwise.
func (o *Dividends2Info) GetExDate() string {
	if o == nil || o.ExDate == nil {
		var ret string
		return ret
	}
	return *o.ExDate
}

// GetExDateOk returns a tuple with the ExDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dividends2Info) GetExDateOk() (*string, bool) {
	if o == nil || o.ExDate == nil {
		return nil, false
	}
	return o.ExDate, true
}

// HasExDate returns a boolean if a field has been set.
func (o *Dividends2Info) HasExDate() bool {
	if o != nil && o.ExDate != nil {
		return true
	}

	return false
}

// SetExDate gets a reference to the given string and assigns it to the ExDate field.
func (o *Dividends2Info) SetExDate(v string) {
	o.ExDate = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *Dividends2Info) GetAmount() float32 {
	if o == nil || o.Amount == nil {
		var ret float32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dividends2Info) GetAmountOk() (*float32, bool) {
	if o == nil || o.Amount == nil {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *Dividends2Info) HasAmount() bool {
	if o != nil && o.Amount != nil {
		return true
	}

	return false
}

// SetAmount gets a reference to the given float32 and assigns it to the Amount field.
func (o *Dividends2Info) SetAmount(v float32) {
	o.Amount = &v
}

func (o Dividends2Info) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ExDate != nil {
		toSerialize["exDate"] = o.ExDate
	}
	if o.Amount != nil {
		toSerialize["amount"] = o.Amount
	}
	return json.Marshal(toSerialize)
}

type NullableDividends2Info struct {
	value *Dividends2Info
	isSet bool
}

func (v NullableDividends2Info) Get() *Dividends2Info {
	return v.value
}

func (v *NullableDividends2Info) Set(val *Dividends2Info) {
	v.value = val
	v.isSet = true
}

func (v NullableDividends2Info) IsSet() bool {
	return v.isSet
}

func (v *NullableDividends2Info) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDividends2Info(val *Dividends2Info) *NullableDividends2Info {
	return &NullableDividends2Info{value: val, isSet: true}
}

func (v NullableDividends2Info) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDividends2Info) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


