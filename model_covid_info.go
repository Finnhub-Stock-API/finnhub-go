/*
Finnhub API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finnhub

import (
	"encoding/json"
)

// CovidInfo struct for CovidInfo
type CovidInfo struct {
	// State.
	State *string `json:"state,omitempty"`
	// Number of confirmed cases.
	Case *float32 `json:"case,omitempty"`
	// Number of confirmed deaths.
	Death *float32 `json:"death,omitempty"`
	// Updated time.
	Updated *string `json:"updated,omitempty"`
}

// NewCovidInfo instantiates a new CovidInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCovidInfo() *CovidInfo {
	this := CovidInfo{}
	return &this
}

// NewCovidInfoWithDefaults instantiates a new CovidInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCovidInfoWithDefaults() *CovidInfo {
	this := CovidInfo{}
	return &this
}

// GetState returns the State field value if set, zero value otherwise.
func (o *CovidInfo) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CovidInfo) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *CovidInfo) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *CovidInfo) SetState(v string) {
	o.State = &v
}

// GetCase returns the Case field value if set, zero value otherwise.
func (o *CovidInfo) GetCase() float32 {
	if o == nil || o.Case == nil {
		var ret float32
		return ret
	}
	return *o.Case
}

// GetCaseOk returns a tuple with the Case field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CovidInfo) GetCaseOk() (*float32, bool) {
	if o == nil || o.Case == nil {
		return nil, false
	}
	return o.Case, true
}

// HasCase returns a boolean if a field has been set.
func (o *CovidInfo) HasCase() bool {
	if o != nil && o.Case != nil {
		return true
	}

	return false
}

// SetCase gets a reference to the given float32 and assigns it to the Case field.
func (o *CovidInfo) SetCase(v float32) {
	o.Case = &v
}

// GetDeath returns the Death field value if set, zero value otherwise.
func (o *CovidInfo) GetDeath() float32 {
	if o == nil || o.Death == nil {
		var ret float32
		return ret
	}
	return *o.Death
}

// GetDeathOk returns a tuple with the Death field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CovidInfo) GetDeathOk() (*float32, bool) {
	if o == nil || o.Death == nil {
		return nil, false
	}
	return o.Death, true
}

// HasDeath returns a boolean if a field has been set.
func (o *CovidInfo) HasDeath() bool {
	if o != nil && o.Death != nil {
		return true
	}

	return false
}

// SetDeath gets a reference to the given float32 and assigns it to the Death field.
func (o *CovidInfo) SetDeath(v float32) {
	o.Death = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *CovidInfo) GetUpdated() string {
	if o == nil || o.Updated == nil {
		var ret string
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CovidInfo) GetUpdatedOk() (*string, bool) {
	if o == nil || o.Updated == nil {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *CovidInfo) HasUpdated() bool {
	if o != nil && o.Updated != nil {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given string and assigns it to the Updated field.
func (o *CovidInfo) SetUpdated(v string) {
	o.Updated = &v
}

func (o CovidInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.Case != nil {
		toSerialize["case"] = o.Case
	}
	if o.Death != nil {
		toSerialize["death"] = o.Death
	}
	if o.Updated != nil {
		toSerialize["updated"] = o.Updated
	}
	return json.Marshal(toSerialize)
}

type NullableCovidInfo struct {
	value *CovidInfo
	isSet bool
}

func (v NullableCovidInfo) Get() *CovidInfo {
	return v.value
}

func (v *NullableCovidInfo) Set(val *CovidInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableCovidInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableCovidInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCovidInfo(val *CovidInfo) *NullableCovidInfo {
	return &NullableCovidInfo{value: val, isSet: true}
}

func (v NullableCovidInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCovidInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


