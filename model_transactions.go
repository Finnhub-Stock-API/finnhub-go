/*
Finnhub API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finnhub

import (
	"encoding/json"
)

// Transactions struct for Transactions
type Transactions struct {
	// Symbol.
	Symbol *string `json:"symbol,omitempty"`
	// Insider's name.
	Name *string `json:"name,omitempty"`
	// Number of shares held after the transaction.
	Share *int64 `json:"share,omitempty"`
	// Number of share changed from the last period. A positive value suggests a <code>BUY</code> transaction. A negative value suggests a <code>SELL</code> transaction.
	Change *int64 `json:"change,omitempty"`
	// Filing date.
	FilingDate *string `json:"filingDate,omitempty"`
	// Transaction date.
	TransactionDate *string `json:"transactionDate,omitempty"`
	// Average transaction price.
	TransactionPrice *float32 `json:"transactionPrice,omitempty"`
	// Transaction code. A list of codes and their meanings can be found <a href=\"https://www.sec.gov/about/forms/form4data.pdf\" target=\"_blank\" rel=\"noopener\">here</a>.
	TransactionCode *string `json:"transactionCode,omitempty"`
}

// NewTransactions instantiates a new Transactions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactions() *Transactions {
	this := Transactions{}
	return &this
}

// NewTransactionsWithDefaults instantiates a new Transactions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionsWithDefaults() *Transactions {
	this := Transactions{}
	return &this
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *Transactions) GetSymbol() string {
	if o == nil || o.Symbol == nil {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transactions) GetSymbolOk() (*string, bool) {
	if o == nil || o.Symbol == nil {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *Transactions) HasSymbol() bool {
	if o != nil && o.Symbol != nil {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *Transactions) SetSymbol(v string) {
	o.Symbol = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Transactions) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transactions) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Transactions) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Transactions) SetName(v string) {
	o.Name = &v
}

// GetShare returns the Share field value if set, zero value otherwise.
func (o *Transactions) GetShare() int64 {
	if o == nil || o.Share == nil {
		var ret int64
		return ret
	}
	return *o.Share
}

// GetShareOk returns a tuple with the Share field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transactions) GetShareOk() (*int64, bool) {
	if o == nil || o.Share == nil {
		return nil, false
	}
	return o.Share, true
}

// HasShare returns a boolean if a field has been set.
func (o *Transactions) HasShare() bool {
	if o != nil && o.Share != nil {
		return true
	}

	return false
}

// SetShare gets a reference to the given int64 and assigns it to the Share field.
func (o *Transactions) SetShare(v int64) {
	o.Share = &v
}

// GetChange returns the Change field value if set, zero value otherwise.
func (o *Transactions) GetChange() int64 {
	if o == nil || o.Change == nil {
		var ret int64
		return ret
	}
	return *o.Change
}

// GetChangeOk returns a tuple with the Change field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transactions) GetChangeOk() (*int64, bool) {
	if o == nil || o.Change == nil {
		return nil, false
	}
	return o.Change, true
}

// HasChange returns a boolean if a field has been set.
func (o *Transactions) HasChange() bool {
	if o != nil && o.Change != nil {
		return true
	}

	return false
}

// SetChange gets a reference to the given int64 and assigns it to the Change field.
func (o *Transactions) SetChange(v int64) {
	o.Change = &v
}

// GetFilingDate returns the FilingDate field value if set, zero value otherwise.
func (o *Transactions) GetFilingDate() string {
	if o == nil || o.FilingDate == nil {
		var ret string
		return ret
	}
	return *o.FilingDate
}

// GetFilingDateOk returns a tuple with the FilingDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transactions) GetFilingDateOk() (*string, bool) {
	if o == nil || o.FilingDate == nil {
		return nil, false
	}
	return o.FilingDate, true
}

// HasFilingDate returns a boolean if a field has been set.
func (o *Transactions) HasFilingDate() bool {
	if o != nil && o.FilingDate != nil {
		return true
	}

	return false
}

// SetFilingDate gets a reference to the given string and assigns it to the FilingDate field.
func (o *Transactions) SetFilingDate(v string) {
	o.FilingDate = &v
}

// GetTransactionDate returns the TransactionDate field value if set, zero value otherwise.
func (o *Transactions) GetTransactionDate() string {
	if o == nil || o.TransactionDate == nil {
		var ret string
		return ret
	}
	return *o.TransactionDate
}

// GetTransactionDateOk returns a tuple with the TransactionDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transactions) GetTransactionDateOk() (*string, bool) {
	if o == nil || o.TransactionDate == nil {
		return nil, false
	}
	return o.TransactionDate, true
}

// HasTransactionDate returns a boolean if a field has been set.
func (o *Transactions) HasTransactionDate() bool {
	if o != nil && o.TransactionDate != nil {
		return true
	}

	return false
}

// SetTransactionDate gets a reference to the given string and assigns it to the TransactionDate field.
func (o *Transactions) SetTransactionDate(v string) {
	o.TransactionDate = &v
}

// GetTransactionPrice returns the TransactionPrice field value if set, zero value otherwise.
func (o *Transactions) GetTransactionPrice() float32 {
	if o == nil || o.TransactionPrice == nil {
		var ret float32
		return ret
	}
	return *o.TransactionPrice
}

// GetTransactionPriceOk returns a tuple with the TransactionPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transactions) GetTransactionPriceOk() (*float32, bool) {
	if o == nil || o.TransactionPrice == nil {
		return nil, false
	}
	return o.TransactionPrice, true
}

// HasTransactionPrice returns a boolean if a field has been set.
func (o *Transactions) HasTransactionPrice() bool {
	if o != nil && o.TransactionPrice != nil {
		return true
	}

	return false
}

// SetTransactionPrice gets a reference to the given float32 and assigns it to the TransactionPrice field.
func (o *Transactions) SetTransactionPrice(v float32) {
	o.TransactionPrice = &v
}

// GetTransactionCode returns the TransactionCode field value if set, zero value otherwise.
func (o *Transactions) GetTransactionCode() string {
	if o == nil || o.TransactionCode == nil {
		var ret string
		return ret
	}
	return *o.TransactionCode
}

// GetTransactionCodeOk returns a tuple with the TransactionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transactions) GetTransactionCodeOk() (*string, bool) {
	if o == nil || o.TransactionCode == nil {
		return nil, false
	}
	return o.TransactionCode, true
}

// HasTransactionCode returns a boolean if a field has been set.
func (o *Transactions) HasTransactionCode() bool {
	if o != nil && o.TransactionCode != nil {
		return true
	}

	return false
}

// SetTransactionCode gets a reference to the given string and assigns it to the TransactionCode field.
func (o *Transactions) SetTransactionCode(v string) {
	o.TransactionCode = &v
}

func (o Transactions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Symbol != nil {
		toSerialize["symbol"] = o.Symbol
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Share != nil {
		toSerialize["share"] = o.Share
	}
	if o.Change != nil {
		toSerialize["change"] = o.Change
	}
	if o.FilingDate != nil {
		toSerialize["filingDate"] = o.FilingDate
	}
	if o.TransactionDate != nil {
		toSerialize["transactionDate"] = o.TransactionDate
	}
	if o.TransactionPrice != nil {
		toSerialize["transactionPrice"] = o.TransactionPrice
	}
	if o.TransactionCode != nil {
		toSerialize["transactionCode"] = o.TransactionCode
	}
	return json.Marshal(toSerialize)
}

type NullableTransactions struct {
	value *Transactions
	isSet bool
}

func (v NullableTransactions) Get() *Transactions {
	return v.value
}

func (v *NullableTransactions) Set(val *Transactions) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactions) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactions(val *Transactions) *NullableTransactions {
	return &NullableTransactions{value: val, isSet: true}
}

func (v NullableTransactions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


