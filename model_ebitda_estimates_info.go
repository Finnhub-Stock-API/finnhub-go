/*
Finnhub API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finnhub

import (
	"encoding/json"
)

// EbitdaEstimatesInfo struct for EbitdaEstimatesInfo
type EbitdaEstimatesInfo struct {
	// Average EBITDA estimates including Finnhub's proprietary estimates.
	EbitdaAvg *float32 `json:"ebitdaAvg,omitempty"`
	// Highest estimate.
	EbitdaHigh *float32 `json:"ebitdaHigh,omitempty"`
	// Lowest estimate.
	EbitdaLow *float32 `json:"ebitdaLow,omitempty"`
	// Number of Analysts.
	NumberAnalysts *int64 `json:"numberAnalysts,omitempty"`
	// Period.
	Period *string `json:"period,omitempty"`
}

// NewEbitdaEstimatesInfo instantiates a new EbitdaEstimatesInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEbitdaEstimatesInfo() *EbitdaEstimatesInfo {
	this := EbitdaEstimatesInfo{}
	return &this
}

// NewEbitdaEstimatesInfoWithDefaults instantiates a new EbitdaEstimatesInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEbitdaEstimatesInfoWithDefaults() *EbitdaEstimatesInfo {
	this := EbitdaEstimatesInfo{}
	return &this
}

// GetEbitdaAvg returns the EbitdaAvg field value if set, zero value otherwise.
func (o *EbitdaEstimatesInfo) GetEbitdaAvg() float32 {
	if o == nil || o.EbitdaAvg == nil {
		var ret float32
		return ret
	}
	return *o.EbitdaAvg
}

// GetEbitdaAvgOk returns a tuple with the EbitdaAvg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EbitdaEstimatesInfo) GetEbitdaAvgOk() (*float32, bool) {
	if o == nil || o.EbitdaAvg == nil {
		return nil, false
	}
	return o.EbitdaAvg, true
}

// HasEbitdaAvg returns a boolean if a field has been set.
func (o *EbitdaEstimatesInfo) HasEbitdaAvg() bool {
	if o != nil && o.EbitdaAvg != nil {
		return true
	}

	return false
}

// SetEbitdaAvg gets a reference to the given float32 and assigns it to the EbitdaAvg field.
func (o *EbitdaEstimatesInfo) SetEbitdaAvg(v float32) {
	o.EbitdaAvg = &v
}

// GetEbitdaHigh returns the EbitdaHigh field value if set, zero value otherwise.
func (o *EbitdaEstimatesInfo) GetEbitdaHigh() float32 {
	if o == nil || o.EbitdaHigh == nil {
		var ret float32
		return ret
	}
	return *o.EbitdaHigh
}

// GetEbitdaHighOk returns a tuple with the EbitdaHigh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EbitdaEstimatesInfo) GetEbitdaHighOk() (*float32, bool) {
	if o == nil || o.EbitdaHigh == nil {
		return nil, false
	}
	return o.EbitdaHigh, true
}

// HasEbitdaHigh returns a boolean if a field has been set.
func (o *EbitdaEstimatesInfo) HasEbitdaHigh() bool {
	if o != nil && o.EbitdaHigh != nil {
		return true
	}

	return false
}

// SetEbitdaHigh gets a reference to the given float32 and assigns it to the EbitdaHigh field.
func (o *EbitdaEstimatesInfo) SetEbitdaHigh(v float32) {
	o.EbitdaHigh = &v
}

// GetEbitdaLow returns the EbitdaLow field value if set, zero value otherwise.
func (o *EbitdaEstimatesInfo) GetEbitdaLow() float32 {
	if o == nil || o.EbitdaLow == nil {
		var ret float32
		return ret
	}
	return *o.EbitdaLow
}

// GetEbitdaLowOk returns a tuple with the EbitdaLow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EbitdaEstimatesInfo) GetEbitdaLowOk() (*float32, bool) {
	if o == nil || o.EbitdaLow == nil {
		return nil, false
	}
	return o.EbitdaLow, true
}

// HasEbitdaLow returns a boolean if a field has been set.
func (o *EbitdaEstimatesInfo) HasEbitdaLow() bool {
	if o != nil && o.EbitdaLow != nil {
		return true
	}

	return false
}

// SetEbitdaLow gets a reference to the given float32 and assigns it to the EbitdaLow field.
func (o *EbitdaEstimatesInfo) SetEbitdaLow(v float32) {
	o.EbitdaLow = &v
}

// GetNumberAnalysts returns the NumberAnalysts field value if set, zero value otherwise.
func (o *EbitdaEstimatesInfo) GetNumberAnalysts() int64 {
	if o == nil || o.NumberAnalysts == nil {
		var ret int64
		return ret
	}
	return *o.NumberAnalysts
}

// GetNumberAnalystsOk returns a tuple with the NumberAnalysts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EbitdaEstimatesInfo) GetNumberAnalystsOk() (*int64, bool) {
	if o == nil || o.NumberAnalysts == nil {
		return nil, false
	}
	return o.NumberAnalysts, true
}

// HasNumberAnalysts returns a boolean if a field has been set.
func (o *EbitdaEstimatesInfo) HasNumberAnalysts() bool {
	if o != nil && o.NumberAnalysts != nil {
		return true
	}

	return false
}

// SetNumberAnalysts gets a reference to the given int64 and assigns it to the NumberAnalysts field.
func (o *EbitdaEstimatesInfo) SetNumberAnalysts(v int64) {
	o.NumberAnalysts = &v
}

// GetPeriod returns the Period field value if set, zero value otherwise.
func (o *EbitdaEstimatesInfo) GetPeriod() string {
	if o == nil || o.Period == nil {
		var ret string
		return ret
	}
	return *o.Period
}

// GetPeriodOk returns a tuple with the Period field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EbitdaEstimatesInfo) GetPeriodOk() (*string, bool) {
	if o == nil || o.Period == nil {
		return nil, false
	}
	return o.Period, true
}

// HasPeriod returns a boolean if a field has been set.
func (o *EbitdaEstimatesInfo) HasPeriod() bool {
	if o != nil && o.Period != nil {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given string and assigns it to the Period field.
func (o *EbitdaEstimatesInfo) SetPeriod(v string) {
	o.Period = &v
}

func (o EbitdaEstimatesInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EbitdaAvg != nil {
		toSerialize["ebitdaAvg"] = o.EbitdaAvg
	}
	if o.EbitdaHigh != nil {
		toSerialize["ebitdaHigh"] = o.EbitdaHigh
	}
	if o.EbitdaLow != nil {
		toSerialize["ebitdaLow"] = o.EbitdaLow
	}
	if o.NumberAnalysts != nil {
		toSerialize["numberAnalysts"] = o.NumberAnalysts
	}
	if o.Period != nil {
		toSerialize["period"] = o.Period
	}
	return json.Marshal(toSerialize)
}

type NullableEbitdaEstimatesInfo struct {
	value *EbitdaEstimatesInfo
	isSet bool
}

func (v NullableEbitdaEstimatesInfo) Get() *EbitdaEstimatesInfo {
	return v.value
}

func (v *NullableEbitdaEstimatesInfo) Set(val *EbitdaEstimatesInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableEbitdaEstimatesInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableEbitdaEstimatesInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEbitdaEstimatesInfo(val *EbitdaEstimatesInfo) *NullableEbitdaEstimatesInfo {
	return &NullableEbitdaEstimatesInfo{value: val, isSet: true}
}

func (v NullableEbitdaEstimatesInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEbitdaEstimatesInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


