/*
 * Finnhub API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finnhub

import (
	"encoding/json"
)

// MutualFundsHoldings struct for MutualFundsHoldings
type MutualFundsHoldings struct {
	// Symbol.
	Symbol *string `json:"symbol,omitempty"`
	// Holdings update date.
	AtDate *string `json:"atDate,omitempty"`
	// Number of holdings.
	NumberOfHoldings *int64 `json:"numberOfHoldings,omitempty"`
	// Array of holdings.
	Holdings *[]map[string]interface{} `json:"holdings,omitempty"`
}

// NewMutualFundsHoldings instantiates a new MutualFundsHoldings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMutualFundsHoldings() *MutualFundsHoldings {
	this := MutualFundsHoldings{}
	return &this
}

// NewMutualFundsHoldingsWithDefaults instantiates a new MutualFundsHoldings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMutualFundsHoldingsWithDefaults() *MutualFundsHoldings {
	this := MutualFundsHoldings{}
	return &this
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *MutualFundsHoldings) GetSymbol() string {
	if o == nil || o.Symbol == nil {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MutualFundsHoldings) GetSymbolOk() (*string, bool) {
	if o == nil || o.Symbol == nil {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *MutualFundsHoldings) HasSymbol() bool {
	if o != nil && o.Symbol != nil {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *MutualFundsHoldings) SetSymbol(v string) {
	o.Symbol = &v
}

// GetAtDate returns the AtDate field value if set, zero value otherwise.
func (o *MutualFundsHoldings) GetAtDate() string {
	if o == nil || o.AtDate == nil {
		var ret string
		return ret
	}
	return *o.AtDate
}

// GetAtDateOk returns a tuple with the AtDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MutualFundsHoldings) GetAtDateOk() (*string, bool) {
	if o == nil || o.AtDate == nil {
		return nil, false
	}
	return o.AtDate, true
}

// HasAtDate returns a boolean if a field has been set.
func (o *MutualFundsHoldings) HasAtDate() bool {
	if o != nil && o.AtDate != nil {
		return true
	}

	return false
}

// SetAtDate gets a reference to the given string and assigns it to the AtDate field.
func (o *MutualFundsHoldings) SetAtDate(v string) {
	o.AtDate = &v
}

// GetNumberOfHoldings returns the NumberOfHoldings field value if set, zero value otherwise.
func (o *MutualFundsHoldings) GetNumberOfHoldings() int64 {
	if o == nil || o.NumberOfHoldings == nil {
		var ret int64
		return ret
	}
	return *o.NumberOfHoldings
}

// GetNumberOfHoldingsOk returns a tuple with the NumberOfHoldings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MutualFundsHoldings) GetNumberOfHoldingsOk() (*int64, bool) {
	if o == nil || o.NumberOfHoldings == nil {
		return nil, false
	}
	return o.NumberOfHoldings, true
}

// HasNumberOfHoldings returns a boolean if a field has been set.
func (o *MutualFundsHoldings) HasNumberOfHoldings() bool {
	if o != nil && o.NumberOfHoldings != nil {
		return true
	}

	return false
}

// SetNumberOfHoldings gets a reference to the given int64 and assigns it to the NumberOfHoldings field.
func (o *MutualFundsHoldings) SetNumberOfHoldings(v int64) {
	o.NumberOfHoldings = &v
}

// GetHoldings returns the Holdings field value if set, zero value otherwise.
func (o *MutualFundsHoldings) GetHoldings() []map[string]interface{} {
	if o == nil || o.Holdings == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Holdings
}

// GetHoldingsOk returns a tuple with the Holdings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MutualFundsHoldings) GetHoldingsOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Holdings == nil {
		return nil, false
	}
	return o.Holdings, true
}

// HasHoldings returns a boolean if a field has been set.
func (o *MutualFundsHoldings) HasHoldings() bool {
	if o != nil && o.Holdings != nil {
		return true
	}

	return false
}

// SetHoldings gets a reference to the given []map[string]interface{} and assigns it to the Holdings field.
func (o *MutualFundsHoldings) SetHoldings(v []map[string]interface{}) {
	o.Holdings = &v
}

func (o MutualFundsHoldings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Symbol != nil {
		toSerialize["symbol"] = o.Symbol
	}
	if o.AtDate != nil {
		toSerialize["atDate"] = o.AtDate
	}
	if o.NumberOfHoldings != nil {
		toSerialize["numberOfHoldings"] = o.NumberOfHoldings
	}
	if o.Holdings != nil {
		toSerialize["holdings"] = o.Holdings
	}
	return json.Marshal(toSerialize)
}

type NullableMutualFundsHoldings struct {
	value *MutualFundsHoldings
	isSet bool
}

func (v NullableMutualFundsHoldings) Get() *MutualFundsHoldings {
	return v.value
}

func (v *NullableMutualFundsHoldings) Set(val *MutualFundsHoldings) {
	v.value = val
	v.isSet = true
}

func (v NullableMutualFundsHoldings) IsSet() bool {
	return v.isSet
}

func (v *NullableMutualFundsHoldings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMutualFundsHoldings(val *MutualFundsHoldings) *NullableMutualFundsHoldings {
	return &NullableMutualFundsHoldings{value: val, isSet: true}
}

func (v NullableMutualFundsHoldings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMutualFundsHoldings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


