/*
 * Finnhub API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finnhub

import (
	"encoding/json"
)

// Dividends2Basic struct for Dividends2Basic
type Dividends2Basic struct {
	// Symbol
	Symbol *string `json:"symbol,omitempty"`
	// 
	Data *[]map[string]interface{} `json:"data,omitempty"`
}

// NewDividends2Basic instantiates a new Dividends2Basic object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDividends2Basic() *Dividends2Basic {
	this := Dividends2Basic{}
	return &this
}

// NewDividends2BasicWithDefaults instantiates a new Dividends2Basic object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDividends2BasicWithDefaults() *Dividends2Basic {
	this := Dividends2Basic{}
	return &this
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *Dividends2Basic) GetSymbol() string {
	if o == nil || o.Symbol == nil {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dividends2Basic) GetSymbolOk() (*string, bool) {
	if o == nil || o.Symbol == nil {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *Dividends2Basic) HasSymbol() bool {
	if o != nil && o.Symbol != nil {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *Dividends2Basic) SetSymbol(v string) {
	o.Symbol = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *Dividends2Basic) GetData() []map[string]interface{} {
	if o == nil || o.Data == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dividends2Basic) GetDataOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *Dividends2Basic) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given []map[string]interface{} and assigns it to the Data field.
func (o *Dividends2Basic) SetData(v []map[string]interface{}) {
	o.Data = &v
}

func (o Dividends2Basic) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Symbol != nil {
		toSerialize["symbol"] = o.Symbol
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableDividends2Basic struct {
	value *Dividends2Basic
	isSet bool
}

func (v NullableDividends2Basic) Get() *Dividends2Basic {
	return v.value
}

func (v *NullableDividends2Basic) Set(val *Dividends2Basic) {
	v.value = val
	v.isSet = true
}

func (v NullableDividends2Basic) IsSet() bool {
	return v.isSet
}

func (v *NullableDividends2Basic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDividends2Basic(val *Dividends2Basic) *NullableDividends2Basic {
	return &NullableDividends2Basic{value: val, isSet: true}
}

func (v NullableDividends2Basic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDividends2Basic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


