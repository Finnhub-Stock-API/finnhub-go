/*
 * Finnhub API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finnhub

import (
	"encoding/json"
)

// InvestmentThemesThematicInvesting struct for InvestmentThemesThematicInvesting
type InvestmentThemesThematicInvesting struct {
	// Investment theme
	Theme *string `json:"theme,omitempty"`
	// Investment theme portfolio.
	Data *[]map[string]interface{} `json:"data,omitempty"`
}

// NewInvestmentThemesThematicInvesting instantiates a new InvestmentThemesThematicInvesting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvestmentThemesThematicInvesting() *InvestmentThemesThematicInvesting {
	this := InvestmentThemesThematicInvesting{}
	return &this
}

// NewInvestmentThemesThematicInvestingWithDefaults instantiates a new InvestmentThemesThematicInvesting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvestmentThemesThematicInvestingWithDefaults() *InvestmentThemesThematicInvesting {
	this := InvestmentThemesThematicInvesting{}
	return &this
}

// GetTheme returns the Theme field value if set, zero value otherwise.
func (o *InvestmentThemesThematicInvesting) GetTheme() string {
	if o == nil || o.Theme == nil {
		var ret string
		return ret
	}
	return *o.Theme
}

// GetThemeOk returns a tuple with the Theme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestmentThemesThematicInvesting) GetThemeOk() (*string, bool) {
	if o == nil || o.Theme == nil {
		return nil, false
	}
	return o.Theme, true
}

// HasTheme returns a boolean if a field has been set.
func (o *InvestmentThemesThematicInvesting) HasTheme() bool {
	if o != nil && o.Theme != nil {
		return true
	}

	return false
}

// SetTheme gets a reference to the given string and assigns it to the Theme field.
func (o *InvestmentThemesThematicInvesting) SetTheme(v string) {
	o.Theme = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *InvestmentThemesThematicInvesting) GetData() []map[string]interface{} {
	if o == nil || o.Data == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestmentThemesThematicInvesting) GetDataOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *InvestmentThemesThematicInvesting) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given []map[string]interface{} and assigns it to the Data field.
func (o *InvestmentThemesThematicInvesting) SetData(v []map[string]interface{}) {
	o.Data = &v
}

func (o InvestmentThemesThematicInvesting) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Theme != nil {
		toSerialize["theme"] = o.Theme
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableInvestmentThemesThematicInvesting struct {
	value *InvestmentThemesThematicInvesting
	isSet bool
}

func (v NullableInvestmentThemesThematicInvesting) Get() *InvestmentThemesThematicInvesting {
	return v.value
}

func (v *NullableInvestmentThemesThematicInvesting) Set(val *InvestmentThemesThematicInvesting) {
	v.value = val
	v.isSet = true
}

func (v NullableInvestmentThemesThematicInvesting) IsSet() bool {
	return v.isSet
}

func (v *NullableInvestmentThemesThematicInvesting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvestmentThemesThematicInvesting(val *InvestmentThemesThematicInvesting) *NullableInvestmentThemesThematicInvesting {
	return &NullableInvestmentThemesThematicInvesting{value: val, isSet: true}
}

func (v NullableInvestmentThemesThematicInvesting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvestmentThemesThematicInvesting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


