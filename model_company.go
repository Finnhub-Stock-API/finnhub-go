/*
Finnhub API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finnhub

import (
	"encoding/json"
)

// Company struct for Company
type Company struct {
	// Executive name
	Name *string `json:"name,omitempty"`
	// Age
	Age *int64 `json:"age,omitempty"`
	// Title
	Title *string `json:"title,omitempty"`
	// Year first appointed as executive/director of the company
	Since *string `json:"since,omitempty"`
	// Sex
	Sex *string `json:"sex,omitempty"`
	// Total compensation
	Compensation *int64 `json:"compensation,omitempty"`
	// Compensation currency
	Currency *string `json:"currency,omitempty"`
}

// NewCompany instantiates a new Company object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompany() *Company {
	this := Company{}
	return &this
}

// NewCompanyWithDefaults instantiates a new Company object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompanyWithDefaults() *Company {
	this := Company{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Company) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Company) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Company) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Company) SetName(v string) {
	o.Name = &v
}

// GetAge returns the Age field value if set, zero value otherwise.
func (o *Company) GetAge() int64 {
	if o == nil || o.Age == nil {
		var ret int64
		return ret
	}
	return *o.Age
}

// GetAgeOk returns a tuple with the Age field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Company) GetAgeOk() (*int64, bool) {
	if o == nil || o.Age == nil {
		return nil, false
	}
	return o.Age, true
}

// HasAge returns a boolean if a field has been set.
func (o *Company) HasAge() bool {
	if o != nil && o.Age != nil {
		return true
	}

	return false
}

// SetAge gets a reference to the given int64 and assigns it to the Age field.
func (o *Company) SetAge(v int64) {
	o.Age = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *Company) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Company) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *Company) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *Company) SetTitle(v string) {
	o.Title = &v
}

// GetSince returns the Since field value if set, zero value otherwise.
func (o *Company) GetSince() string {
	if o == nil || o.Since == nil {
		var ret string
		return ret
	}
	return *o.Since
}

// GetSinceOk returns a tuple with the Since field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Company) GetSinceOk() (*string, bool) {
	if o == nil || o.Since == nil {
		return nil, false
	}
	return o.Since, true
}

// HasSince returns a boolean if a field has been set.
func (o *Company) HasSince() bool {
	if o != nil && o.Since != nil {
		return true
	}

	return false
}

// SetSince gets a reference to the given string and assigns it to the Since field.
func (o *Company) SetSince(v string) {
	o.Since = &v
}

// GetSex returns the Sex field value if set, zero value otherwise.
func (o *Company) GetSex() string {
	if o == nil || o.Sex == nil {
		var ret string
		return ret
	}
	return *o.Sex
}

// GetSexOk returns a tuple with the Sex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Company) GetSexOk() (*string, bool) {
	if o == nil || o.Sex == nil {
		return nil, false
	}
	return o.Sex, true
}

// HasSex returns a boolean if a field has been set.
func (o *Company) HasSex() bool {
	if o != nil && o.Sex != nil {
		return true
	}

	return false
}

// SetSex gets a reference to the given string and assigns it to the Sex field.
func (o *Company) SetSex(v string) {
	o.Sex = &v
}

// GetCompensation returns the Compensation field value if set, zero value otherwise.
func (o *Company) GetCompensation() int64 {
	if o == nil || o.Compensation == nil {
		var ret int64
		return ret
	}
	return *o.Compensation
}

// GetCompensationOk returns a tuple with the Compensation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Company) GetCompensationOk() (*int64, bool) {
	if o == nil || o.Compensation == nil {
		return nil, false
	}
	return o.Compensation, true
}

// HasCompensation returns a boolean if a field has been set.
func (o *Company) HasCompensation() bool {
	if o != nil && o.Compensation != nil {
		return true
	}

	return false
}

// SetCompensation gets a reference to the given int64 and assigns it to the Compensation field.
func (o *Company) SetCompensation(v int64) {
	o.Compensation = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *Company) GetCurrency() string {
	if o == nil || o.Currency == nil {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Company) GetCurrencyOk() (*string, bool) {
	if o == nil || o.Currency == nil {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *Company) HasCurrency() bool {
	if o != nil && o.Currency != nil {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *Company) SetCurrency(v string) {
	o.Currency = &v
}

func (o Company) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Age != nil {
		toSerialize["age"] = o.Age
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	if o.Since != nil {
		toSerialize["since"] = o.Since
	}
	if o.Sex != nil {
		toSerialize["sex"] = o.Sex
	}
	if o.Compensation != nil {
		toSerialize["compensation"] = o.Compensation
	}
	if o.Currency != nil {
		toSerialize["currency"] = o.Currency
	}
	return json.Marshal(toSerialize)
}

type NullableCompany struct {
	value *Company
	isSet bool
}

func (v NullableCompany) Get() *Company {
	return v.value
}

func (v *NullableCompany) Set(val *Company) {
	v.value = val
	v.isSet = true
}

func (v NullableCompany) IsSet() bool {
	return v.isSet
}

func (v *NullableCompany) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompany(val *Company) *NullableCompany {
	return &NullableCompany{value: val, isSet: true}
}

func (v NullableCompany) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompany) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


