/*
Finnhub API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finnhub

import (
	"encoding/json"
)

// EconomicDataInfo struct for EconomicDataInfo
type EconomicDataInfo struct {
	// Date of the reading
	Date *string `json:"date,omitempty"`
	// Value
	Value *float32 `json:"value,omitempty"`
}

// NewEconomicDataInfo instantiates a new EconomicDataInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEconomicDataInfo() *EconomicDataInfo {
	this := EconomicDataInfo{}
	return &this
}

// NewEconomicDataInfoWithDefaults instantiates a new EconomicDataInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEconomicDataInfoWithDefaults() *EconomicDataInfo {
	this := EconomicDataInfo{}
	return &this
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *EconomicDataInfo) GetDate() string {
	if o == nil || o.Date == nil {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EconomicDataInfo) GetDateOk() (*string, bool) {
	if o == nil || o.Date == nil {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *EconomicDataInfo) HasDate() bool {
	if o != nil && o.Date != nil {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *EconomicDataInfo) SetDate(v string) {
	o.Date = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *EconomicDataInfo) GetValue() float32 {
	if o == nil || o.Value == nil {
		var ret float32
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EconomicDataInfo) GetValueOk() (*float32, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *EconomicDataInfo) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given float32 and assigns it to the Value field.
func (o *EconomicDataInfo) SetValue(v float32) {
	o.Value = &v
}

func (o EconomicDataInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Date != nil {
		toSerialize["date"] = o.Date
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableEconomicDataInfo struct {
	value *EconomicDataInfo
	isSet bool
}

func (v NullableEconomicDataInfo) Get() *EconomicDataInfo {
	return v.value
}

func (v *NullableEconomicDataInfo) Set(val *EconomicDataInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableEconomicDataInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableEconomicDataInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEconomicDataInfo(val *EconomicDataInfo) *NullableEconomicDataInfo {
	return &NullableEconomicDataInfo{value: val, isSet: true}
}

func (v NullableEconomicDataInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEconomicDataInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


