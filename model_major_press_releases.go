/*
 * Finnhub API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finnhub

import (
	"encoding/json"
)

// MajorPressReleases struct for MajorPressReleases
type MajorPressReleases struct {
	// Company symbol.
	Symbol *string `json:"symbol,omitempty"`
	// Array of major developments.
	MajorDevelopment *[]map[string]interface{} `json:"majorDevelopment,omitempty"`
}

// NewMajorPressReleases instantiates a new MajorPressReleases object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMajorPressReleases() *MajorPressReleases {
	this := MajorPressReleases{}
	return &this
}

// NewMajorPressReleasesWithDefaults instantiates a new MajorPressReleases object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMajorPressReleasesWithDefaults() *MajorPressReleases {
	this := MajorPressReleases{}
	return &this
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *MajorPressReleases) GetSymbol() string {
	if o == nil || o.Symbol == nil {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MajorPressReleases) GetSymbolOk() (*string, bool) {
	if o == nil || o.Symbol == nil {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *MajorPressReleases) HasSymbol() bool {
	if o != nil && o.Symbol != nil {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *MajorPressReleases) SetSymbol(v string) {
	o.Symbol = &v
}

// GetMajorDevelopment returns the MajorDevelopment field value if set, zero value otherwise.
func (o *MajorPressReleases) GetMajorDevelopment() []map[string]interface{} {
	if o == nil || o.MajorDevelopment == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.MajorDevelopment
}

// GetMajorDevelopmentOk returns a tuple with the MajorDevelopment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MajorPressReleases) GetMajorDevelopmentOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.MajorDevelopment == nil {
		return nil, false
	}
	return o.MajorDevelopment, true
}

// HasMajorDevelopment returns a boolean if a field has been set.
func (o *MajorPressReleases) HasMajorDevelopment() bool {
	if o != nil && o.MajorDevelopment != nil {
		return true
	}

	return false
}

// SetMajorDevelopment gets a reference to the given []map[string]interface{} and assigns it to the MajorDevelopment field.
func (o *MajorPressReleases) SetMajorDevelopment(v []map[string]interface{}) {
	o.MajorDevelopment = &v
}

func (o MajorPressReleases) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Symbol != nil {
		toSerialize["symbol"] = o.Symbol
	}
	if o.MajorDevelopment != nil {
		toSerialize["majorDevelopment"] = o.MajorDevelopment
	}
	return json.Marshal(toSerialize)
}

type NullableMajorPressReleases struct {
	value *MajorPressReleases
	isSet bool
}

func (v NullableMajorPressReleases) Get() *MajorPressReleases {
	return v.value
}

func (v *NullableMajorPressReleases) Set(val *MajorPressReleases) {
	v.value = val
	v.isSet = true
}

func (v NullableMajorPressReleases) IsSet() bool {
	return v.isSet
}

func (v *NullableMajorPressReleases) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMajorPressReleases(val *MajorPressReleases) *NullableMajorPressReleases {
	return &NullableMajorPressReleases{value: val, isSet: true}
}

func (v NullableMajorPressReleases) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMajorPressReleases) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


