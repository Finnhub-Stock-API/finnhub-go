/*
Finnhub API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finnhub

import (
	"encoding/json"
)

// Report struct for Report
type Report struct {
	// Access number.
	AccessNumber *string `json:"accessNumber,omitempty"`
	// Symbol.
	Symbol *string `json:"symbol,omitempty"`
	// CIK.
	Cik *string `json:"cik,omitempty"`
	// Year.
	Year *int64 `json:"year,omitempty"`
	// Quarter.
	Quarter *int64 `json:"quarter,omitempty"`
	// Form type.
	Form *string `json:"form,omitempty"`
	// Period start date <code>%Y-%m-%d %H:%M:%S</code>.
	StartDate *string `json:"startDate,omitempty"`
	// Period end date <code>%Y-%m-%d %H:%M:%S</code>.
	EndDate *string `json:"endDate,omitempty"`
	// Filed date <code>%Y-%m-%d %H:%M:%S</code>.
	FiledDate *string `json:"filedDate,omitempty"`
	// Accepted date <code>%Y-%m-%d %H:%M:%S</code>.
	AcceptedDate *string `json:"acceptedDate,omitempty"`
	Report *map[string]interface{} `json:"report,omitempty"`
}

// NewReport instantiates a new Report object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReport() *Report {
	this := Report{}
	return &this
}

// NewReportWithDefaults instantiates a new Report object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportWithDefaults() *Report {
	this := Report{}
	return &this
}

// GetAccessNumber returns the AccessNumber field value if set, zero value otherwise.
func (o *Report) GetAccessNumber() string {
	if o == nil || o.AccessNumber == nil {
		var ret string
		return ret
	}
	return *o.AccessNumber
}

// GetAccessNumberOk returns a tuple with the AccessNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetAccessNumberOk() (*string, bool) {
	if o == nil || o.AccessNumber == nil {
		return nil, false
	}
	return o.AccessNumber, true
}

// HasAccessNumber returns a boolean if a field has been set.
func (o *Report) HasAccessNumber() bool {
	if o != nil && o.AccessNumber != nil {
		return true
	}

	return false
}

// SetAccessNumber gets a reference to the given string and assigns it to the AccessNumber field.
func (o *Report) SetAccessNumber(v string) {
	o.AccessNumber = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *Report) GetSymbol() string {
	if o == nil || o.Symbol == nil {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetSymbolOk() (*string, bool) {
	if o == nil || o.Symbol == nil {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *Report) HasSymbol() bool {
	if o != nil && o.Symbol != nil {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *Report) SetSymbol(v string) {
	o.Symbol = &v
}

// GetCik returns the Cik field value if set, zero value otherwise.
func (o *Report) GetCik() string {
	if o == nil || o.Cik == nil {
		var ret string
		return ret
	}
	return *o.Cik
}

// GetCikOk returns a tuple with the Cik field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetCikOk() (*string, bool) {
	if o == nil || o.Cik == nil {
		return nil, false
	}
	return o.Cik, true
}

// HasCik returns a boolean if a field has been set.
func (o *Report) HasCik() bool {
	if o != nil && o.Cik != nil {
		return true
	}

	return false
}

// SetCik gets a reference to the given string and assigns it to the Cik field.
func (o *Report) SetCik(v string) {
	o.Cik = &v
}

// GetYear returns the Year field value if set, zero value otherwise.
func (o *Report) GetYear() int64 {
	if o == nil || o.Year == nil {
		var ret int64
		return ret
	}
	return *o.Year
}

// GetYearOk returns a tuple with the Year field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetYearOk() (*int64, bool) {
	if o == nil || o.Year == nil {
		return nil, false
	}
	return o.Year, true
}

// HasYear returns a boolean if a field has been set.
func (o *Report) HasYear() bool {
	if o != nil && o.Year != nil {
		return true
	}

	return false
}

// SetYear gets a reference to the given int64 and assigns it to the Year field.
func (o *Report) SetYear(v int64) {
	o.Year = &v
}

// GetQuarter returns the Quarter field value if set, zero value otherwise.
func (o *Report) GetQuarter() int64 {
	if o == nil || o.Quarter == nil {
		var ret int64
		return ret
	}
	return *o.Quarter
}

// GetQuarterOk returns a tuple with the Quarter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetQuarterOk() (*int64, bool) {
	if o == nil || o.Quarter == nil {
		return nil, false
	}
	return o.Quarter, true
}

// HasQuarter returns a boolean if a field has been set.
func (o *Report) HasQuarter() bool {
	if o != nil && o.Quarter != nil {
		return true
	}

	return false
}

// SetQuarter gets a reference to the given int64 and assigns it to the Quarter field.
func (o *Report) SetQuarter(v int64) {
	o.Quarter = &v
}

// GetForm returns the Form field value if set, zero value otherwise.
func (o *Report) GetForm() string {
	if o == nil || o.Form == nil {
		var ret string
		return ret
	}
	return *o.Form
}

// GetFormOk returns a tuple with the Form field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetFormOk() (*string, bool) {
	if o == nil || o.Form == nil {
		return nil, false
	}
	return o.Form, true
}

// HasForm returns a boolean if a field has been set.
func (o *Report) HasForm() bool {
	if o != nil && o.Form != nil {
		return true
	}

	return false
}

// SetForm gets a reference to the given string and assigns it to the Form field.
func (o *Report) SetForm(v string) {
	o.Form = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *Report) GetStartDate() string {
	if o == nil || o.StartDate == nil {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetStartDateOk() (*string, bool) {
	if o == nil || o.StartDate == nil {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *Report) HasStartDate() bool {
	if o != nil && o.StartDate != nil {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *Report) SetStartDate(v string) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *Report) GetEndDate() string {
	if o == nil || o.EndDate == nil {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetEndDateOk() (*string, bool) {
	if o == nil || o.EndDate == nil {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *Report) HasEndDate() bool {
	if o != nil && o.EndDate != nil {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *Report) SetEndDate(v string) {
	o.EndDate = &v
}

// GetFiledDate returns the FiledDate field value if set, zero value otherwise.
func (o *Report) GetFiledDate() string {
	if o == nil || o.FiledDate == nil {
		var ret string
		return ret
	}
	return *o.FiledDate
}

// GetFiledDateOk returns a tuple with the FiledDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetFiledDateOk() (*string, bool) {
	if o == nil || o.FiledDate == nil {
		return nil, false
	}
	return o.FiledDate, true
}

// HasFiledDate returns a boolean if a field has been set.
func (o *Report) HasFiledDate() bool {
	if o != nil && o.FiledDate != nil {
		return true
	}

	return false
}

// SetFiledDate gets a reference to the given string and assigns it to the FiledDate field.
func (o *Report) SetFiledDate(v string) {
	o.FiledDate = &v
}

// GetAcceptedDate returns the AcceptedDate field value if set, zero value otherwise.
func (o *Report) GetAcceptedDate() string {
	if o == nil || o.AcceptedDate == nil {
		var ret string
		return ret
	}
	return *o.AcceptedDate
}

// GetAcceptedDateOk returns a tuple with the AcceptedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetAcceptedDateOk() (*string, bool) {
	if o == nil || o.AcceptedDate == nil {
		return nil, false
	}
	return o.AcceptedDate, true
}

// HasAcceptedDate returns a boolean if a field has been set.
func (o *Report) HasAcceptedDate() bool {
	if o != nil && o.AcceptedDate != nil {
		return true
	}

	return false
}

// SetAcceptedDate gets a reference to the given string and assigns it to the AcceptedDate field.
func (o *Report) SetAcceptedDate(v string) {
	o.AcceptedDate = &v
}

// GetReport returns the Report field value if set, zero value otherwise.
func (o *Report) GetReport() map[string]interface{} {
	if o == nil || o.Report == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Report
}

// GetReportOk returns a tuple with the Report field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Report) GetReportOk() (*map[string]interface{}, bool) {
	if o == nil || o.Report == nil {
		return nil, false
	}
	return o.Report, true
}

// HasReport returns a boolean if a field has been set.
func (o *Report) HasReport() bool {
	if o != nil && o.Report != nil {
		return true
	}

	return false
}

// SetReport gets a reference to the given map[string]interface{} and assigns it to the Report field.
func (o *Report) SetReport(v map[string]interface{}) {
	o.Report = &v
}

func (o Report) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccessNumber != nil {
		toSerialize["accessNumber"] = o.AccessNumber
	}
	if o.Symbol != nil {
		toSerialize["symbol"] = o.Symbol
	}
	if o.Cik != nil {
		toSerialize["cik"] = o.Cik
	}
	if o.Year != nil {
		toSerialize["year"] = o.Year
	}
	if o.Quarter != nil {
		toSerialize["quarter"] = o.Quarter
	}
	if o.Form != nil {
		toSerialize["form"] = o.Form
	}
	if o.StartDate != nil {
		toSerialize["startDate"] = o.StartDate
	}
	if o.EndDate != nil {
		toSerialize["endDate"] = o.EndDate
	}
	if o.FiledDate != nil {
		toSerialize["filedDate"] = o.FiledDate
	}
	if o.AcceptedDate != nil {
		toSerialize["acceptedDate"] = o.AcceptedDate
	}
	if o.Report != nil {
		toSerialize["report"] = o.Report
	}
	return json.Marshal(toSerialize)
}

type NullableReport struct {
	value *Report
	isSet bool
}

func (v NullableReport) Get() *Report {
	return v.value
}

func (v *NullableReport) Set(val *Report) {
	v.value = val
	v.isSet = true
}

func (v NullableReport) IsSet() bool {
	return v.isSet
}

func (v *NullableReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReport(val *Report) *NullableReport {
	return &NullableReport{value: val, isSet: true}
}

func (v NullableReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


