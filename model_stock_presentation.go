/*
Finnhub API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finnhub

import (
	"encoding/json"
)

// StockPresentation struct for StockPresentation
type StockPresentation struct {
	// Company symbol.
	Symbol *string `json:"symbol,omitempty"`
	// Presentation data.
	Res *[]PresentationData `json:"res,omitempty"`
}

// NewStockPresentation instantiates a new StockPresentation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStockPresentation() *StockPresentation {
	this := StockPresentation{}
	return &this
}

// NewStockPresentationWithDefaults instantiates a new StockPresentation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStockPresentationWithDefaults() *StockPresentation {
	this := StockPresentation{}
	return &this
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *StockPresentation) GetSymbol() string {
	if o == nil || o.Symbol == nil {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockPresentation) GetSymbolOk() (*string, bool) {
	if o == nil || o.Symbol == nil {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *StockPresentation) HasSymbol() bool {
	if o != nil && o.Symbol != nil {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *StockPresentation) SetSymbol(v string) {
	o.Symbol = &v
}

// GetRes returns the Res field value if set, zero value otherwise.
func (o *StockPresentation) GetRes() []PresentationData {
	if o == nil || o.Res == nil {
		var ret []PresentationData
		return ret
	}
	return *o.Res
}

// GetResOk returns a tuple with the Res field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockPresentation) GetResOk() (*[]PresentationData, bool) {
	if o == nil || o.Res == nil {
		return nil, false
	}
	return o.Res, true
}

// HasRes returns a boolean if a field has been set.
func (o *StockPresentation) HasRes() bool {
	if o != nil && o.Res != nil {
		return true
	}

	return false
}

// SetRes gets a reference to the given []PresentationData and assigns it to the Res field.
func (o *StockPresentation) SetRes(v []PresentationData) {
	o.Res = &v
}

func (o StockPresentation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Symbol != nil {
		toSerialize["symbol"] = o.Symbol
	}
	if o.Res != nil {
		toSerialize["res"] = o.Res
	}
	return json.Marshal(toSerialize)
}

type NullableStockPresentation struct {
	value *StockPresentation
	isSet bool
}

func (v NullableStockPresentation) Get() *StockPresentation {
	return v.value
}

func (v *NullableStockPresentation) Set(val *StockPresentation) {
	v.value = val
	v.isSet = true
}

func (v NullableStockPresentation) IsSet() bool {
	return v.isSet
}

func (v *NullableStockPresentation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStockPresentation(val *StockPresentation) *NullableStockPresentation {
	return &NullableStockPresentation{value: val, isSet: true}
}

func (v NullableStockPresentation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStockPresentation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


