/*
Finnhub API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finnhub

import (
	"encoding/json"
)

// CompanyExecutive struct for CompanyExecutive
type CompanyExecutive struct {
	// Company symbol.
	Symbol *string `json:"symbol,omitempty"`
	// Array of company's executives and members of the Board.
	Executive *[]Company `json:"executive,omitempty"`
}

// NewCompanyExecutive instantiates a new CompanyExecutive object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompanyExecutive() *CompanyExecutive {
	this := CompanyExecutive{}
	return &this
}

// NewCompanyExecutiveWithDefaults instantiates a new CompanyExecutive object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompanyExecutiveWithDefaults() *CompanyExecutive {
	this := CompanyExecutive{}
	return &this
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *CompanyExecutive) GetSymbol() string {
	if o == nil || o.Symbol == nil {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyExecutive) GetSymbolOk() (*string, bool) {
	if o == nil || o.Symbol == nil {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *CompanyExecutive) HasSymbol() bool {
	if o != nil && o.Symbol != nil {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *CompanyExecutive) SetSymbol(v string) {
	o.Symbol = &v
}

// GetExecutive returns the Executive field value if set, zero value otherwise.
func (o *CompanyExecutive) GetExecutive() []Company {
	if o == nil || o.Executive == nil {
		var ret []Company
		return ret
	}
	return *o.Executive
}

// GetExecutiveOk returns a tuple with the Executive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyExecutive) GetExecutiveOk() (*[]Company, bool) {
	if o == nil || o.Executive == nil {
		return nil, false
	}
	return o.Executive, true
}

// HasExecutive returns a boolean if a field has been set.
func (o *CompanyExecutive) HasExecutive() bool {
	if o != nil && o.Executive != nil {
		return true
	}

	return false
}

// SetExecutive gets a reference to the given []Company and assigns it to the Executive field.
func (o *CompanyExecutive) SetExecutive(v []Company) {
	o.Executive = &v
}

func (o CompanyExecutive) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Symbol != nil {
		toSerialize["symbol"] = o.Symbol
	}
	if o.Executive != nil {
		toSerialize["executive"] = o.Executive
	}
	return json.Marshal(toSerialize)
}

type NullableCompanyExecutive struct {
	value *CompanyExecutive
	isSet bool
}

func (v NullableCompanyExecutive) Get() *CompanyExecutive {
	return v.value
}

func (v *NullableCompanyExecutive) Set(val *CompanyExecutive) {
	v.value = val
	v.isSet = true
}

func (v NullableCompanyExecutive) IsSet() bool {
	return v.isSet
}

func (v *NullableCompanyExecutive) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompanyExecutive(val *CompanyExecutive) *NullableCompanyExecutive {
	return &NullableCompanyExecutive{value: val, isSet: true}
}

func (v NullableCompanyExecutive) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompanyExecutive) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


