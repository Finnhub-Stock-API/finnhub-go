/*
Finnhub API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finnhub

import (
	"encoding/json"
)

// IPOCalendar struct for IPOCalendar
type IPOCalendar struct {
	// Array of IPO events.
	IpoCalendar *[]IPOEvent `json:"ipoCalendar,omitempty"`
}

// NewIPOCalendar instantiates a new IPOCalendar object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIPOCalendar() *IPOCalendar {
	this := IPOCalendar{}
	return &this
}

// NewIPOCalendarWithDefaults instantiates a new IPOCalendar object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIPOCalendarWithDefaults() *IPOCalendar {
	this := IPOCalendar{}
	return &this
}

// GetIpoCalendar returns the IpoCalendar field value if set, zero value otherwise.
func (o *IPOCalendar) GetIpoCalendar() []IPOEvent {
	if o == nil || o.IpoCalendar == nil {
		var ret []IPOEvent
		return ret
	}
	return *o.IpoCalendar
}

// GetIpoCalendarOk returns a tuple with the IpoCalendar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPOCalendar) GetIpoCalendarOk() (*[]IPOEvent, bool) {
	if o == nil || o.IpoCalendar == nil {
		return nil, false
	}
	return o.IpoCalendar, true
}

// HasIpoCalendar returns a boolean if a field has been set.
func (o *IPOCalendar) HasIpoCalendar() bool {
	if o != nil && o.IpoCalendar != nil {
		return true
	}

	return false
}

// SetIpoCalendar gets a reference to the given []IPOEvent and assigns it to the IpoCalendar field.
func (o *IPOCalendar) SetIpoCalendar(v []IPOEvent) {
	o.IpoCalendar = &v
}

func (o IPOCalendar) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IpoCalendar != nil {
		toSerialize["ipoCalendar"] = o.IpoCalendar
	}
	return json.Marshal(toSerialize)
}

type NullableIPOCalendar struct {
	value *IPOCalendar
	isSet bool
}

func (v NullableIPOCalendar) Get() *IPOCalendar {
	return v.value
}

func (v *NullableIPOCalendar) Set(val *IPOCalendar) {
	v.value = val
	v.isSet = true
}

func (v NullableIPOCalendar) IsSet() bool {
	return v.isSet
}

func (v *NullableIPOCalendar) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIPOCalendar(val *IPOCalendar) *NullableIPOCalendar {
	return &NullableIPOCalendar{value: val, isSet: true}
}

func (v NullableIPOCalendar) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIPOCalendar) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


