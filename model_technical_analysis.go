/*
Finnhub API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package finnhub

import (
	"encoding/json"
)

// TechnicalAnalysis struct for TechnicalAnalysis
type TechnicalAnalysis struct {
	Count *Indicator `json:"count,omitempty"`
	// Aggregate Signal
	Signal *string `json:"signal,omitempty"`
}

// NewTechnicalAnalysis instantiates a new TechnicalAnalysis object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTechnicalAnalysis() *TechnicalAnalysis {
	this := TechnicalAnalysis{}
	return &this
}

// NewTechnicalAnalysisWithDefaults instantiates a new TechnicalAnalysis object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTechnicalAnalysisWithDefaults() *TechnicalAnalysis {
	this := TechnicalAnalysis{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *TechnicalAnalysis) GetCount() Indicator {
	if o == nil || o.Count == nil {
		var ret Indicator
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TechnicalAnalysis) GetCountOk() (*Indicator, bool) {
	if o == nil || o.Count == nil {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *TechnicalAnalysis) HasCount() bool {
	if o != nil && o.Count != nil {
		return true
	}

	return false
}

// SetCount gets a reference to the given Indicator and assigns it to the Count field.
func (o *TechnicalAnalysis) SetCount(v Indicator) {
	o.Count = &v
}

// GetSignal returns the Signal field value if set, zero value otherwise.
func (o *TechnicalAnalysis) GetSignal() string {
	if o == nil || o.Signal == nil {
		var ret string
		return ret
	}
	return *o.Signal
}

// GetSignalOk returns a tuple with the Signal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TechnicalAnalysis) GetSignalOk() (*string, bool) {
	if o == nil || o.Signal == nil {
		return nil, false
	}
	return o.Signal, true
}

// HasSignal returns a boolean if a field has been set.
func (o *TechnicalAnalysis) HasSignal() bool {
	if o != nil && o.Signal != nil {
		return true
	}

	return false
}

// SetSignal gets a reference to the given string and assigns it to the Signal field.
func (o *TechnicalAnalysis) SetSignal(v string) {
	o.Signal = &v
}

func (o TechnicalAnalysis) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Count != nil {
		toSerialize["count"] = o.Count
	}
	if o.Signal != nil {
		toSerialize["signal"] = o.Signal
	}
	return json.Marshal(toSerialize)
}

type NullableTechnicalAnalysis struct {
	value *TechnicalAnalysis
	isSet bool
}

func (v NullableTechnicalAnalysis) Get() *TechnicalAnalysis {
	return v.value
}

func (v *NullableTechnicalAnalysis) Set(val *TechnicalAnalysis) {
	v.value = val
	v.isSet = true
}

func (v NullableTechnicalAnalysis) IsSet() bool {
	return v.isSet
}

func (v *NullableTechnicalAnalysis) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTechnicalAnalysis(val *TechnicalAnalysis) *NullableTechnicalAnalysis {
	return &NullableTechnicalAnalysis{value: val, isSet: true}
}

func (v NullableTechnicalAnalysis) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTechnicalAnalysis) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


